#include "stdafx.h"

namespace Challenge {

//#define _DumpHashes
//#define _DumpAddresses
  /*
  --- 100F0 Digest ---
  0x80-0x10000 (Cache[2]->HV)
  0x10580-0x16180 (Cache[416]->HV)
  0x16F00-0x20000 (Cache[5BC]->HV)
  0x20000-0x30000 (Cache[800]->HV)
  0x30000-0x40000 (Cache[C00]->HV)

  --- HV Digest ---
  0x34-0x74 (HV)
  0x78-0x10000 (HV)
  0x100C0-0x10100 (HV)
  0x10350-0x162C0‬ (HV)
  0x16EA0-0x20000 (HV)
  0x20000-0x2FFFF (HV)
  0x30000-0x3FFFF (HV)


  --- ECC Digest ---
  0x34-0x40 (HV)
  0x40-0x70 (Physical HV)
  0x70-0x74 (HV)
  0x78-0x80 (HV)
  0x80-0x10000 (Cache[2]->HV) 2-400
  0x100C0-0x10100 (Physical HV) 402-404
  0x10350-0x10380 (Physical HV) 40C-40E
  0x10380-0x16280 (Cache[40E]->HV) 40E-58A
  0x16280-0x162C0 (Physical HV) 58A-58C
  0x16EA0-0x16F00 (Physical HV) 5BA-5BC
  0x16F00-0x20000 (Cache[5BC]->HV) 5BC-800
  0x20000-0x30000 (Cache[800]->HV) 800-C00
  0x30000-0x40000 (Cache[C00]->HV) C00-1000
  */

	BOOL NotifyOnce = FALSE;

	BYTE ChalKey[0x90] = {
		0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x04, 0xD0, 0x55, 0x50, 0x79, 0x19, 0x95, 0x27,
		0x78, 0x89, 0x97, 0x08, 0xDE, 0x24, 0xD1, 0xED, 0xB1, 0xEA, 0xE5, 0x48,
		0xAC, 0x1A, 0xC3, 0xC8, 0x29, 0x45, 0xB0, 0x16, 0x9B, 0xEF, 0x78, 0x8F,
		0xEF, 0x26, 0x9D, 0x54, 0x59, 0x95, 0x2D, 0x25, 0xA5, 0xAC, 0xA3, 0xA6,
		0x94, 0x45, 0xE5, 0x42, 0x2E, 0x39, 0x88, 0x0C, 0x3C, 0xAE, 0xEB, 0xFD,
		0x53, 0x3A, 0xE9, 0x70, 0x43, 0xEA, 0xD1, 0xD1, 0x78, 0xCE, 0xED, 0x1C,
		0xE5, 0xFD, 0x0F, 0x80, 0x94, 0x6F, 0x4F, 0xFF, 0xAD, 0x45, 0x88, 0xCF,
		0x22, 0x4C, 0x56, 0xDE, 0x03, 0xE2, 0x46, 0x2F, 0x19, 0xB8, 0x2C, 0xD0,
		0xD7, 0xE9, 0x64, 0xB2, 0x68, 0x0C, 0x40, 0xF5, 0x4F, 0xDA, 0x80, 0x8F,
		0x71, 0xA9, 0x64, 0xA4, 0x15, 0x53, 0x6E, 0x2B, 0x49, 0x44, 0x55, 0xCB,
		0x05, 0x17, 0x3F, 0x66, 0xE1, 0x32, 0x2F, 0x1D, 0xE9, 0x2A, 0xD6, 0x4B
	};

	BYTE SaveAdresses[0x124] = {
		0x7D, 0x88, 0x02, 0xA6, 0xF9, 0x81, 0xFF, 0xF8, 0xFB, 0xE1, 0xFF, 0xF0,
		0xFB, 0xC1, 0xFF, 0xE8, 0xFB, 0xA1, 0xFF, 0xE0, 0xF8, 0x21, 0xFF, 0x11,
		0x7C, 0x7D, 0x1B, 0x78, 0x7C, 0x9F, 0x23, 0x78, 0x7C, 0xBE, 0x2B, 0x78,
		0x38, 0x61, 0x00, 0x50, 0xFB, 0xE3, 0x00, 0x00, 0x38, 0x80, 0x00, 0x08,
		0x48, 0x00, 0x00, 0x95, 0x38, 0x61, 0x00, 0x50, 0xFB, 0xC3, 0x00, 0x00,
		0x38, 0x80, 0x00, 0x08, 0x48, 0x00, 0x00, 0x85, 0x7F, 0xE3, 0xFB, 0x78,
		0x7F, 0xC4, 0xF3, 0x78, 0x48, 0x00, 0x00, 0x79, 0x7F, 0xA3, 0xEB, 0x78,
		0x7F, 0xE4, 0xFB, 0x78, 0x7F, 0xC5, 0xF3, 0x78, 0x4B, 0xFF, 0xFE, 0x7D,
		0x7F, 0xA3, 0xEB, 0x78, 0x38, 0xA1, 0x00, 0x70, 0x38, 0xC0, 0x00, 0x0B,
		0x7C, 0xC9, 0x03, 0xA6, 0xE8, 0x83, 0x00, 0x00, 0xF8, 0x85, 0x00, 0x00,
		0x38, 0xA5, 0x00, 0x08, 0x38, 0x63, 0x00, 0x08, 0x43, 0x20, 0xFF, 0xF0,
		0x38, 0x61, 0x00, 0x70, 0x38, 0x81, 0x00, 0x50, 0x38, 0xA0, 0x00, 0x14,
		0x4B, 0xFF, 0xFE, 0x39, 0x38, 0x61, 0x00, 0x50, 0x38, 0x80, 0x00, 0x14,
		0x48, 0x00, 0x00, 0x29, 0x38, 0x21, 0x00, 0xF0, 0xE9, 0x81, 0xFF, 0xF8,
		0x7D, 0x88, 0x03, 0xA6, 0xEB, 0xA1, 0xFF, 0xE0, 0xEB, 0xC1, 0xFF, 0xE8,
		0xEB, 0xE1, 0xFF, 0xF0, 0x38, 0x60, 0x00, 0x00, 0x4E, 0x80, 0x00, 0x20,
		0x00, 0x00, 0x00, 0x00, 0x7D, 0x88, 0x02, 0xA6, 0xF9, 0x81, 0xFF, 0xF8,
		0xFB, 0xE1, 0xFF, 0xF0, 0xF8, 0x21, 0xFF, 0x11, 0x7C, 0x7F, 0x1B, 0x78,
		0x7C, 0x89, 0x03, 0xA6, 0x88, 0x7F, 0x00, 0x00, 0x3C, 0x80, 0x80, 0x00,
		0x60, 0x84, 0x02, 0x00, 0x78, 0x84, 0x07, 0xC6, 0x64, 0x84, 0xEA, 0x00,
		0x80, 0xA4, 0x10, 0x18, 0x54, 0xA5, 0x01, 0x8D, 0x41, 0x82, 0xFF, 0xF8,
		0x54, 0x63, 0xC0, 0x0E, 0x90, 0x64, 0x10, 0x14, 0x3B, 0xFF, 0x00, 0x01,
		0x43, 0x20, 0xFF, 0xD4, 0x38, 0x21, 0x00, 0xF0, 0xE9, 0x81, 0xFF, 0xF8,
		0x7D, 0x88, 0x03, 0xA6, 0xEB, 0xE1, 0xFF, 0xF0, 0x4E, 0x80, 0x00, 0x20,
		0x00, 0x00, 0x00, 0x00
	};

	BYTE PatchJump[4] = {
		0x00, 0x00, 0xB6, 0x18
	};

	VOID DumpXOSCHeaders(){
		Utilities::PrintToLog("Dumping XOSC Header Files\r\n");
		PLDR_DATA_TABLE_ENTRY hXam = (PLDR_DATA_TABLE_ENTRY)GetModuleHandleA(MODULE_XAM);
		PLDR_DATA_TABLE_ENTRY hKernel = (PLDR_DATA_TABLE_ENTRY)GetModuleHandleA(MODULE_KERNEL);
		PLDR_DATA_TABLE_ENTRY hCurrTitle = (PLDR_DATA_TABLE_ENTRY)GetModuleHandleA(0);

		IMAGE_XEX_HEADER* xamHeader = (IMAGE_XEX_HEADER*)(hXam->XexHeaderBase);

        if (xamHeader) {
            XEX_SECURITY_INFO* securityInfo = (XEX_SECURITY_INFO*)(xamHeader->SecurityInfo);
            int size = ((xamHeader->SizeOfHeaders - ((int)xamHeader->SecurityInfo + 0x17C)) + (int)xamHeader);
			Utilities::CWriteFile("XeNoN:\\XeDumps\\XamHeader.bin", (PBYTE)&securityInfo->AllowedMediaTypes, size);
        }

        IMAGE_XEX_HEADER* krnlHeader = (IMAGE_XEX_HEADER*)(hKernel->XexHeaderBase);
        if (krnlHeader) {
            XEX_SECURITY_INFO* securityInfo = (XEX_SECURITY_INFO*)(krnlHeader->SecurityInfo);
            int size = ((krnlHeader->SizeOfHeaders - ((int)krnlHeader->SecurityInfo + 0x17C)) + (int)krnlHeader);
            Utilities::CWriteFile("XeNoN:\\XeDumps\\KrnlHeader.bin", (PBYTE)&securityInfo->AllowedMediaTypes, size);
        }

        IMAGE_XEX_HEADER* currModuleHeader = (IMAGE_XEX_HEADER*)(hCurrTitle->XexHeaderBase);
        if (currModuleHeader) {
            XEX_SECURITY_INFO* securityInfo = (XEX_SECURITY_INFO*)(currModuleHeader->SecurityInfo);
            int size = ((currModuleHeader->SizeOfHeaders - (DWORD)&securityInfo->AllowedMediaTypes) + (int)currModuleHeader);
			CHAR Path[64];
			sprintf(Path, "XeNoN:\\XeDumps\\TitleHeader_%08X.bin", XamGetCurrentTitleId());
            Utilities::CWriteFile(Path, (PBYTE)&securityInfo->AllowedMediaTypes, size);
        }
		Utilities::PrintToLog("XOSC Header Files Dumped\r\n");
	}

	typedef DWORD(*ExecuteSupervisorChallenge_t)(DWORD Task, PBYTE TableName, DWORD TableSize, PBYTE Buffer, DWORD BufferSize);
	DWORD XamLoaderExecuteAsyncChallengeHook(DWORD Address, DWORD Task, PBYTE TableName, DWORD TableSize, PBYTE Buffer, DWORD BufferSize) {
	
		Utilities::PrintToLog("XamLoaderExecuteAsyncChallenge\r\n");

		ExecuteSupervisorChallenge_t ExecuteSupervisorChallenge = (ExecuteSupervisorChallenge_t)Address;
		ExecuteSupervisorChallenge(Task, TableName, TableSize, Buffer, BufferSize);

		//Utilities::CWriteFile("XeNoN:\\XOSC_Pre_Buffer.bin", Buffer, 0x400);

		PBYTE KV = (PBYTE)&Globals::KeyVault;

		Utilities::PCONSOLE_TYPE ct = Utilities::GetConsoleType(KV, Globals::Type1KV);

		memset(Buffer, 0, 0x400);
		
		*(QWORD*)(Buffer + 0x00) = 0x90002;

		*(QWORD*)(Buffer + 0x08) = (0x1BD + (Globals::Type1KV ? 0 : 2));

		*(QWORD*)(Buffer + 0x10) = 0x0;
		
		*(QWORD*)(Buffer + 0x18) = 0x0;

		*(DWORD*)(Buffer + 0x20) = 0xC8003003;

		memset((Buffer + 0x24), 0xAA, 0x10);

		*(DWORD*)(Buffer + 0x34) = 0x40000012;
    		
    	*(DWORD*)(Buffer + 0x38) = 0x0;

    	*(DWORD*)(Buffer + 0x3C) = ((XboxKrnlVersion->Major & 0xF) << 28) | ((XboxKrnlVersion->Minor & 0xF) << 24) | (XboxKrnlVersion->Build << 8) | (XboxKrnlVersion->Qfe);
		
    	*(DWORD*)(Buffer + 0x40) = ((XboxKrnlVersion->Major & 0xF) << 28) | ((XboxKrnlVersion->Minor & 0xF) << 24) | (XboxKrnlVersion->Build << 8) | (XboxKrnlVersion->Qfe);
    	
		*(DWORD*)(Buffer + 0x44) = 0xFFFE07D1;

		*(QWORD*)(Buffer + 0x48) = 0x0;
    
		XeCryptSha(Globals::Spoofed_CPUKey, 0x10, 0, 0, 0, 0, (Buffer + 0x50), 0x10);

		//DumpXOSCHeaders();

		BYTE Unknown[0x10] = { 0 };
		Unknown[0x0E] &= 0xF8;
		
		BYTE SecurityDigest[0x14];
		memcpy(SecurityDigest, Globals::KVDigest, 0x10);
		memcpy((SecurityDigest + 0x10), ct->Fuses, 0x4);

		PBYTE XamHeader;
		DWORD XamSize;
		XGetModuleSection(GetModuleHandle(NAME_MODULE), "XH", (PVOID*)&XamHeader, &XamSize);
		XeCryptSha(XamHeader, XamSize, SecurityDigest, 0x14, Unknown, 0x10, SecurityDigest, 0x14);

		PBYTE KernelHeader;
		DWORD KernelSize;
		XGetModuleSection(GetModuleHandle(NAME_MODULE), "KH", (PVOID*)&KernelHeader, &KernelSize);
		XeCryptSha(KernelHeader, KernelSize, SecurityDigest, 0x14, Globals::MacAddress, 0x6, SecurityDigest, 0x14);
		
		PBYTE TitleHeader;
		DWORD TitleSize;
		XGetModuleSection(GetModuleHandle(NAME_MODULE), "TH", (PVOID*)&TitleHeader, &TitleSize);
		XeCryptSha(TitleHeader, TitleSize, SecurityDigest, 0x14, ct->SMC, 0x5, SecurityDigest, 0x14);
		
		DWORD Addr = (DWORD)Utilities::ResolveFunction("xosc9v2.xex", 0x01);			
		XeCryptSha((PBYTE)(0x90010000 | *(PWORD)(Addr - 0x62)), (*(PWORD)(Addr - 0x66)), SecurityDigest, 0x14, NULL, NULL, Buffer + 0x60, 0x10);
		(Buffer + 0x60)[0] = 7;

		memcpy((Buffer + 0x70), ct->Fuses, 0x10);
		
		*(DWORD*)(Buffer + 0x80) = *(BYTE*)(KV + 0xC89);

		*(QWORD*)(Buffer + 0x84) = 0x0;

		memset((Buffer + 0x8C), 0xAA, 0x64);

		Utilities::SpoofDriveOsig(KV + 0xC8A, (Buffer + 0xF0));

		memcpy((Buffer + 0x114), KV + 0xC8A, 0x24);

		memcpy((Buffer + 0x138), KV + 0xB0, 0xC);

		*(DWORD*)(Buffer + 0x144) = 0xAA0000 | (Globals::Type1KV ? 0xD81E : 0xD83E);
		
		memcpy((Buffer + 0x148), KV + 0xC8, 0x2);

		memcpy((Buffer + 0x14A), KV + 0x1C, 0x2);

		*(DWORD*)(Buffer + 0x14C) = 0x0;
		
		memcpy((Buffer + 0x150), KV + 0x24, 0x4);

		*(DWORD*)(Buffer + 0x154) = 0x70000;

		*(DWORD*)(Buffer + 0x158) = 0x23289D3 | (Globals::CRL ? 0x10000 : 0) | (Globals::FCRT ? 0x1000000 : 0);
        	
		*(DWORD*)(Buffer + 0x15C) = 0xAAAAAAAA;

		*(QWORD*)(Buffer + 0x160) = 0x0;
		
		*(QWORD*)(Buffer + 0x168) = 0xAAAAAAAA;

		*(QWORD*)(Buffer + 0x170) = ct->PCIE;

		*(QWORD*)(Buffer + 0x198) = 0x5;
		
		memcpy((Buffer + 0x1A0), KV + 0x9CA, 0x5);
		
		*(DWORD*)(Buffer + 0x1D0) = ct->HWFlags;

		memset((Buffer + 0x21C), 0xAA, 0x8C);

		*(DWORD*)(Buffer + 0x2C4) = 0x6;
    		
		memset((Buffer + 0x2C8), 0xAA, 0x10);
		
		*(DWORD*)(Buffer + 0x2D8) = 0x5F534750;
		
		*(DWORD*)(Buffer + 0x2DC) = 0xAAAAAAAA;

		memcpy(Globals::XOSCBuffer, Buffer, 0x400);
		return 0;
	}

	VOID DecryptChallenge(PBYTE Data, DWORD Size) {
		Utilities::CWriteFile("XeNoN:\\Chal_Enc.bin", Data, Size);
        Utilities::PrintToLog("Decrypting XeKeysExecute Challenge Data\r\n"); 
        XECRYPT_RC4_STATE rc4; 
        PBYTE Decrypted = (PBYTE)XPhysicalAlloc(Size, MAXULONG_PTR, 0, PAGE_READWRITE); 
        memcpy(Decrypted, Data, Size); 
        PBYTE ARC4 = (PBYTE)XPhysicalAlloc(0x10, MAXULONG_PTR, 0, PAGE_READWRITE); 
        BYTE BL_KEY[0x10] = {0xDD, 0x88, 0xAD, 0x0C, 0x9E, 0xD6, 0x69, 0xE7, 0xB5, 0x67, 0x94, 0xFB, 0x68, 0x56, 0x3E, 0xFA}; // found in HV 
        XeCryptHmacSha((BYTE*)BL_KEY, 0x10, Decrypted + 0x10, 0x10, 0, 0, 0, 0, ARC4, 0x10); 
        XeCryptRc4Key(&rc4, ARC4, 0x10); 
        XeCryptRc4Ecb(&rc4, Decrypted + 0x20, Size - 0x20); 
        Utilities::CWriteFile("XeNoN:\\Chal_Dec.bin", Decrypted, Size);
        Utilities::PrintToLog("XeKeysExecute Challenge Data Decrypted\r\n"); 
	} 

	DWORD XeKeysExecuteHook(PBYTE Buffer, DWORD Size, PBYTE Salt, PXBOX_KRNL_VERSION KrnlBuild, PDWORD r7, PDWORD r8){
		Utilities::PrintToLog("XeKeysExecute\r\n");
		//not loaded
		while (!Globals::Initialized) { Sleep(1000); }

		//Challenge::DumpCache(0);
		//DWORD PSize = *(PDWORD)((PBYTE)Buffer + 0xC); 
		//DecryptChallenge(Buffer, PSize);
		
		PBYTE CleanHV;
		DWORD HVSize;
		XGetModuleSection(GetModuleHandle(NAME_MODULE), "HV", (PVOID*)&CleanHV, &HVSize);

		// Clean HV
		HVPeekPoke::HvPokeBytes(0x8000010000000000, CleanHV, 0xFFFF);
		HVPeekPoke::HvPokeBytes(0x8000010000000000, Globals::Dumped_HV, 0x20); 
		HVPeekPoke::HvPokeBytes(0x8000010000000020, Globals::Spoofed_CPUKey, 0x10);
        
		// HV + 0x10000
		HVPeekPoke::HvPokeBytes(0x8000010200010000, (CleanHV + 0x10000), 0xFFFF);
		HVPeekPoke::HvPokeBytes(0x8000010200010000, (Globals::Dumped_HV + 0x10000), 0x04);
		HVPeekPoke::HvPokeBytes(0x8000010200010020, (Globals::Dumped_HV + 0x10020), 0xA0);
		HVPeekPoke::HvPokeBytes(0x8000010200010100, (Globals::Dumped_HV + 0x10100), 0x30);
		HVPeekPoke::HvPokeBytes(0x8000010200016390, (Globals::Dumped_HV + 0x16390), 0x04);
		HVPeekPoke::HvPokeBytes(0x8000010200016620, (Globals::Dumped_HV + 0x16620), 0x01);
		HVPeekPoke::HvPokeBytes(0x8000010200016640, (Globals::Dumped_HV + 0x16640), 0x14);
		HVPeekPoke::HvPokeBytes(0x8000010200016680, (Globals::Dumped_HV + 0x16680), 0x80);
		HVPeekPoke::HvPokeBytes(0x8000010200016710, (Globals::Dumped_HV + 0x16710), 0x10);
		HVPeekPoke::HvPokeBytes(0x8000010200016980, (Globals::Dumped_HV + 0x16980), 0x102);
		HVPeekPoke::HvPokeBytes(0x8000010200016B90, (Globals::Dumped_HV + 0x16B90), 0x10);
		HVPeekPoke::HvPokeBytes(0x8000010200016E98, (Globals::Dumped_HV + 0x16E98), 0x04);

		// HV + 0x20000
		HVPeekPoke::HvPokeBytes(0x8000010400020000, (CleanHV + 0x20000), 0xFFFF);

		// HV + 0x30000
		HVPeekPoke::HvPokeBytes(0x8000010600030000, (CleanHV + 0x30000), 0xFFFF);
/*
		#ifdef _DumpAddresses
		HVPeekPoke::HvPokeBytes(0x0000000200016288ULL, PatchJump, 4);
		HVPeekPoke::HvPokeBytes(0x000000000000B618ULL, SaveAdresses, 0x124);
		#endif

		*/
#ifdef _DumpHashes
		BYTE Hashes[0x100][0x1A] = { 0 };
		BYTE ESalt[0x10];
		BYTE PLoad[0x600];

		memcpy(ESalt, Salt, 0x10);
		memcpy(PLoad, Buffer, 0x600);

		for(int i = 0; i < 256; i++){
			memcpy(Salt, Salts[i], 0x10);
			memcpy(Buffer, PLoad, 0x600);
			XeKeysExecute((PBYTE)Buffer, (DWORD)Size, (PBYTE)MmGetPhysicalAddress(Salt), (PXBOX_KRNL_VERSION)KrnlBuild, (PDWORD)r7, (PDWORD)r8);
			memcpy(Hashes[i], Buffer + 0x50, 0x14);
			memcpy(Hashes[i] + 0x14, Buffer + 0xFA, 0x6);
		}
		Challenge::DumpFilesLoop((PBYTE)Hashes, Buffer);
		
		memcpy(Salt, ESalt, 0x10);
		memcpy(Buffer, PLoad, 0x600);
#endif  /* */
		// Execute the real challenge
		XeKeysExecute((PBYTE)Buffer, (DWORD)Size, (PBYTE)MmGetPhysicalAddress(Salt), (PXBOX_KRNL_VERSION)KrnlBuild, (PDWORD)r7, (PDWORD)r8);
		//Challenge::DumpFiles(Salt, Buffer, (PBYTE)Hashes);

		// Reset Dirty HV
		HVPeekPoke::HvPokeBytes(0x8000010000000000, Globals::Dumped_HV, 0xFFFF);
		HVPeekPoke::HvPokeBytes(0x8000010200010000, (Globals::Dumped_HV + 0x10000), 0xFFFF);
		HVPeekPoke::HvPokeBytes(0x8000010400020000, (Globals::Dumped_HV + 0x20000), 0xFFFF);
		HVPeekPoke::HvPokeBytes(0x8000010600030000, (Globals::Dumped_HV + 0x30000), 0xFFFF);

		PBYTE KV = (PBYTE)&Globals::KeyVault;

		BYTE Mobo = ((*(PBYTE)(KV + 0x9D1) << 4) & 0xF0) | (*(PBYTE)(KV + 0x9D2) & 0x0F);
		DWORD ConsoleSeqAllow = 0x304000E;

		if(Mobo < 0x10 && Globals::Type1KV) ConsoleSeqAllow = 0x10B0524;
		else if(Mobo < 0x14) ConsoleSeqAllow = 0x10C0AD0;
		else if(Mobo < 0x18) ConsoleSeqAllow = 0x10C0AD8;
		else if(Mobo < 0x52) ConsoleSeqAllow = 0x10C0FFB;
		else if(Mobo < 0x58) ConsoleSeqAllow = 0x304000D;
		else ConsoleSeqAllow = 0x304000E;

		*(PDWORD)(Buffer + 0x28) = 0x4E4E0000 | XboxKrnlVersion->Build;

		*(PWORD)(Buffer + 0x2E) = Globals::Type1KV ? 0xD81E : 0xD83E;

		*(PDWORD)(Buffer + 0x30) = 0x7600000;

		*(PDWORD)(Buffer + 0x34) = Globals::UpdateSequence;
		
		*(PDWORD)(Buffer + 0x38) = 0x23289D3 | (Globals::CRL ? 0x10000 : 0) | (Globals::FCRT ? 0x1000000 : 0);

		*(PDWORD)(Buffer + 0x3C) = ConsoleSeqAllow;

		*(PQWORD)(Buffer + 0x40) = 0x200000000;
		
		*(PQWORD)(Buffer + 0x48) = 0x10000000000;

		XeCryptSha(Globals::Spoofed_CPUKey, 0x10, NULL, NULL, NULL, NULL, (Buffer + 0x64), XECRYPT_SHA_DIGEST_SIZE);

		*(PWORD)(Buffer + 0xF8) = ((((DWORD)MmGetPhysicalAddress(Buffer) + 0x400) & 0xFFFF0000) >> 0x10);

		Globals::CRL = TRUE;

		// All done
		XNotifyQueueUI(XNOTIFYUI_TYPE_PREFERRED_REVIEW, 0, 2, L"XeNoN - Fully Stealthed !", NULL);

		//Utilities::ThreadMe((LPTHREAD_START_ROUTINE)RestartMe);
		
		Utilities::CWriteFile("XeNoN:\\XKE.bin", Buffer, 0x100);

		memcpy(Globals::XKEBuffer, Buffer, 0x100);

		return ERROR_SUCCESS;
	}

	VOID RestartMe(){
		Sleep(2000);
		HalReturnToFirmware(HalFatalErrorRebootRoutine);
	}

	VOID DumpFiles(PBYTE Salt, PBYTE Buffer, PBYTE Hashes){
		char KeyName[0x33];
		char dirchar[0x100];
		char filechar[0x100];

		for(DWORD i = 0; i < 1000; i++){

			BYTE Cache[0x1030];
			HVPeekPoke::HvPeekBytes(0x8000020000010000, Cache, 0x1000);
			HVPeekPoke::HvPeekBytes(0x8000010200010100, (Cache + 0x1000), 0x30);

			sprintf(KeyName, "%04X_%04X_%04X\0", 
			*(PWORD)(Cache + 0x1000), 
			*(PWORD)(Cache + 0x1010),
			*(PWORD)(Cache + 0x1020));

			//check directory before creating
			sprintf(filechar, "XeNoN:\\XeDumps\\%s\\%i\\Cache.bin", KeyName, i);
			if(Utilities::FileExists(filechar)) continue;

			sprintf(dirchar, "XeNoN:\\XeDumps\\%s", KeyName);
			CreateDirectory(dirchar, NULL);

			sprintf(dirchar, "XeNoN:\\XeDumps\\%s\\%i", KeyName, i);
			CreateDirectory(dirchar, NULL);

			// Dump Cache + Key
			Utilities::CWriteFile(filechar, Cache, 0x1030);
			
			sprintf(filechar, "XeNoN:\\XeDumps\\%s\\%i\\XKEBuffer.bin", KeyName, i);
			Utilities::CWriteFile(filechar, Buffer, 0x100);
			
			sprintf(filechar, "XeNoN:\\XeDumps\\%s\\%i\\XeRand.bin", KeyName, i);
			Utilities::CWriteFile(filechar, (Globals::Dumped_HV + 0x1564), 0x14);
			
			sprintf(filechar, "XeNoN:\\XeDumps\\%s\\%i\\SboxKey.bin", KeyName, i);
			Utilities::CWriteFile(filechar, (Globals::Dumped_HV + 0x1580), 0x10);

			BYTE ECCSalt[0x2];
			HVPeekPoke::HvPeekBytes(0x800002000001F810, ECCSalt, 0x2);
			sprintf(filechar, "XeNoN:\\XeDumps\\%s\\%i\\ECCSalt.bin", KeyName, i);
			Utilities::CWriteFile(filechar, ECCSalt, 0x2);
			
			sprintf(filechar, "XeNoN:\\XeDumps\\%s\\%i\\HVSalt.bin", KeyName, i);
			Utilities::CWriteFile(filechar, Salt, 0x10);
		
			sprintf(filechar, "XeNoN:\\XeDumps\\%s\\%i\\HV_17559.bin", KeyName, i);
			Utilities::CWriteFile(filechar, Globals::Dumped_HV, 0x40000);
			
			sprintf(filechar, "XeNoN:\\XeDumps\\%s\\%i\\HV_Enc.bin", KeyName, i);
			Utilities::CWriteFile(filechar, (PBYTE)0xC0000000, 0x40000);			

			sprintf(filechar, "XeNoN:\\XeDumps\\%s\\%i\\Keys.bin", KeyName, i);
			Utilities::CWriteFile(filechar, (Cache + 0x1000), 0x30);

			sprintf(filechar, "XeNoN:\\XeDumps\\%s\\%i\\Hashes_%04X.bin", KeyName, i, *(PWORD)(Buffer + 0xF8));
			Utilities::CWriteFile(filechar, Hashes, 0x100 * 0x14);


			Utilities::PrintToLog("Files Dumped (%s_%i)! \r\n", KeyName, i);

			break;
		}
	}

	VOID DumpFilesLoop(PBYTE Hashes, PBYTE Buffer){
		BYTE Key[0x30];
		HVPeekPoke::HvPeekBytes(0x8000010200010100, Key, 0x30);

		char KeyName[0x33];
		sprintf(KeyName, "%04X_%04X_%04X\0", 
			*(PWORD)Key, 
			*(PWORD)(Key + 0x10),
			*(PWORD)(Key + 0x20));

		char dirchar[128];
		memset(dirchar, 0, 128);
		sprintf(dirchar, "XeNoN:\\XeDumps\\%s", KeyName);
		CreateDirectory(dirchar, NULL);


		char filechar[0x100];
		memset(filechar, 0, 0x100);
		sprintf(filechar, "XeNoN:\\XeDumps\\%s\\Hashes.bin", KeyName);
		Utilities::CWriteFile(filechar, Hashes, 0x1A00);

		memset(filechar, 0, 0x100);
		sprintf(filechar, "XeNoN:\\XeDumps\\%s\\Key.bin", KeyName);
		Utilities::CWriteFile(filechar, Key, 0x30);

		memset(filechar, 0, 0x100);
		sprintf(filechar, "XeNoN:\\XeDumps\\%s\\HVEX.bin", KeyName);
		Utilities::CWriteFile(filechar, Buffer + 0xF8, 0x2);
		
		Utilities::PrintToLog("Files Dumped (%s)! \r\n", KeyName);
	}

	VOID sub_23830(BYTE* in_1, DWORD size_1, BYTE* in_2, DWORD size_2){
		DWORD i = 0;
		for(DWORD s = 0; s < size_2; s += 0x14){

			DWORD subsize = (s + 0x14 > size_2) ? size_2 - s : 0x14;

			BYTE tmp[0x14];
			BYTE tmpint[] = {0, 0, 0, i};

			XECRYPT_SHA_STATE sha;
			XeCryptShaInit(&sha);
			XeCryptShaUpdate(&sha, in_1, size_1);
			XeCryptShaUpdate(&sha, tmpint, 4);
			XeCryptShaFinal(&sha, tmp, 0x14);

			for(DWORD l = 0; l < subsize; l++){
				in_2[s + l] ^= tmp[l];
			}
			i++;
		}
	}

	VOID sub_23918(BYTE* Sig, BYTE* Key, BYTE* XeRand){
		BYTE HvData[] = {0xDA, 0x39, 0xA3, 0xEE, 0x5E, 0x6B, 0x4B, 0x0D, 0x32, 0x55, 0xBF, 0xEF, 0x95, 0x60, 0x18, 0x90, 0xAF, 0xD8, 0x07, 0x09}; 
		
		Sig[0] = 0;
		
		memcpy((Sig + 1), XeRand, 0x14);
		memcpy((Sig + 0x15), HvData, 0x14);
		memset((Sig + 0x29), 0, 0x26);
		
		Sig[0x4F] = 1;
		
		memcpy((Sig + 0x50), Key, 0x30);
		
		sub_23830(XeRand, 0x14, (Sig + 0x15), 0x6B);

		sub_23830((Sig + 0x15), 0x6B, XeRand, 0x14);
		memcpy((Sig + 1), XeRand, 0x14);
	}

	
	BYTE Salts[256][16] = {{0x00, 0x17, 0x70, 0x74, 0x33, 0x6D, 0xC5, 0xF6, 0x54, 0x80, 0xCA, 0x5B, 0xD8, 0xE6, 0xA2, 0x1A},
							{0x02, 0x65, 0x49, 0x2F, 0x4B, 0xBE, 0xAB, 0x60, 0x13, 0x10, 0xD6, 0x38, 0xE0, 0xB5, 0x69, 0xC8},
							{0x06, 0x4A, 0x12, 0x4E, 0x53, 0x7C, 0x46, 0xFB, 0x37, 0x58, 0xED, 0xF8, 0x06, 0x3B, 0x27, 0xC9},
							{0x06, 0xF2, 0x8E, 0x01, 0x6F, 0x90, 0xBE, 0x67, 0x46, 0x51, 0xA9, 0xA4, 0x78, 0x6C, 0xA3, 0x10},
							{0x07, 0xFD, 0x26, 0xD4, 0x65, 0xFD, 0x06, 0xF4, 0xB5, 0xB6, 0x0F, 0x8E, 0x62, 0x78, 0x64, 0xB1},
							{0x09, 0xCF, 0xC4, 0x6D, 0x4F, 0x0E, 0x0D, 0xED, 0x3C, 0x17, 0x91, 0x7C, 0xF4, 0x81, 0x4B, 0x27},
							{0x0A, 0xA9, 0x86, 0x63, 0xE2, 0x47, 0x97, 0xB3, 0xDE, 0xFD, 0x22, 0x44, 0x4F, 0x36, 0x40, 0x04},
							{0x0B, 0xA7, 0xDD, 0x8C, 0x82, 0xB9, 0x49, 0x6A, 0xBB, 0xA9, 0x66, 0xC5, 0x74, 0x13, 0x34, 0x10},
							{0x0C, 0x17, 0xE1, 0x3A, 0x06, 0xFA, 0x84, 0x23, 0xEC, 0x55, 0x60, 0xE8, 0x18, 0x48, 0x53, 0x10},
							{0x0F, 0x15, 0x45, 0x2A, 0xDD, 0x8C, 0x70, 0x07, 0x45, 0xF5, 0x16, 0x85, 0xAF, 0x18, 0x51, 0x50},
							{0x10, 0x4C, 0x64, 0x5B, 0xA6, 0xA4, 0x2E, 0xDD, 0xDA, 0x3B, 0xB1, 0xB2, 0xA4, 0xAF, 0x8A, 0xB7},
							{0x10, 0x9E, 0x59, 0xE5, 0x46, 0xD3, 0x34, 0xD7, 0x4A, 0x86, 0xA7, 0xB2, 0x6B, 0x09, 0xB3, 0x79},
							{0x11, 0xEA, 0xC9, 0x34, 0xE6, 0x80, 0x86, 0x86, 0x64, 0x40, 0x95, 0xD8, 0x5A, 0x8D, 0x7D, 0x65},
							{0x15, 0x7C, 0x43, 0x18, 0x8F, 0xF6, 0xEC, 0xED, 0x7A, 0x37, 0x4E, 0xA1, 0xF4, 0xE5, 0x60, 0xC5},
							{0x15, 0x9C, 0x88, 0x4F, 0x94, 0x7A, 0x4A, 0x71, 0x54, 0xAE, 0x2D, 0xB2, 0xE0, 0xC1, 0xF5, 0x62},
							{0x17, 0x1F, 0x58, 0x6C, 0x0D, 0xC5, 0xA1, 0xDC, 0x4F, 0x22, 0x9C, 0x35, 0xB5, 0x3F, 0xEB, 0x7C},
							{0x18, 0x5B, 0xE6, 0xAD, 0xBF, 0x6B, 0xA8, 0x32, 0x53, 0x3F, 0x2D, 0x8C, 0x03, 0xAD, 0x95, 0x52},
							{0x18, 0x94, 0x89, 0xAB, 0x6C, 0xD2, 0xAB, 0xA1, 0xF0, 0xBD, 0x2C, 0x00, 0x71, 0x67, 0xF5, 0xF3},
							{0x19, 0xED, 0x6F, 0xE3, 0x69, 0xEC, 0xBD, 0xA5, 0x9F, 0x32, 0x91, 0x71, 0x66, 0x38, 0xE8, 0x77},
							{0x1B, 0x2C, 0x80, 0xD2, 0xCD, 0x98, 0xEB, 0x71, 0xE6, 0xF2, 0xE7, 0xF9, 0x10, 0x87, 0xC4, 0x2C},
							{0x1B, 0x87, 0x83, 0x5E, 0xAC, 0xBE, 0x83, 0x2C, 0x21, 0xD8, 0x29, 0xF6, 0x0A, 0xEF, 0x9B, 0xAF},
							{0x1B, 0xFA, 0x90, 0x49, 0x7A, 0xC4, 0x2C, 0xD1, 0x47, 0x82, 0x09, 0xE1, 0xD0, 0xE1, 0x26, 0xCC},
							{0x1C, 0x52, 0x3D, 0x40, 0xAB, 0x8F, 0x69, 0xEC, 0x13, 0xBA, 0xBB, 0x57, 0x0A, 0x73, 0x35, 0x03},
							{0x1C, 0x54, 0x09, 0x31, 0x03, 0x38, 0x3B, 0x08, 0x53, 0x66, 0x36, 0xB4, 0x21, 0x60, 0xDE, 0x69},
							{0x1C, 0x90, 0xDA, 0xDE, 0x9E, 0x4E, 0xE4, 0x7A, 0xDB, 0xB0, 0x41, 0x86, 0x79, 0x09, 0x99, 0x54},
							{0x1D, 0xDB, 0xB4, 0x50, 0xEA, 0xF7, 0x71, 0x36, 0xE7, 0xCB, 0x35, 0x20, 0x15, 0x8D, 0xE8, 0x03},
							{0x1D, 0xDC, 0xB1, 0xAB, 0xB8, 0x28, 0x4F, 0x68, 0x6E, 0x43, 0x5D, 0x47, 0x0A, 0x4B, 0x9C, 0x2F},
							{0x1D, 0xFF, 0xE9, 0xA0, 0x26, 0xF1, 0xC5, 0x3A, 0x29, 0x63, 0xF0, 0x57, 0x28, 0xCF, 0xE5, 0x71},
							{0x1E, 0x62, 0x48, 0x72, 0x92, 0xA4, 0x6E, 0xB2, 0xE4, 0x38, 0x53, 0xC1, 0x7C, 0x75, 0xE3, 0x17},
							{0x1E, 0xA2, 0x01, 0xFD, 0xC7, 0x4B, 0x14, 0xE2, 0xCA, 0x0D, 0x44, 0xC8, 0xEB, 0x66, 0x1F, 0xED},
							{0x1F, 0x13, 0xAF, 0x13, 0x64, 0xA7, 0x31, 0xD2, 0xDA, 0xD5, 0xE4, 0x13, 0x1B, 0x73, 0x7F, 0x75},
							{0x20, 0x85, 0x15, 0xDF, 0xC2, 0xBD, 0xAF, 0x18, 0xA9, 0xE5, 0xF7, 0xC1, 0xA0, 0x60, 0x98, 0x0D},
							{0x20, 0xD2, 0x8F, 0xB8, 0x09, 0x7C, 0xF5, 0x51, 0xA4, 0xA2, 0x79, 0x8E, 0xD4, 0xD4, 0x76, 0x62},
							{0x21, 0x3C, 0xAE, 0x1D, 0x8E, 0x2D, 0x4D, 0xCA, 0x56, 0x14, 0x96, 0xFB, 0xDA, 0x9A, 0x61, 0x7A},
							{0x21, 0x41, 0xF0, 0x7E, 0x68, 0x34, 0xB3, 0xF9, 0xE2, 0xB8, 0x9A, 0xEE, 0x80, 0x78, 0x21, 0xB2},
							{0x22, 0x4E, 0xB7, 0x61, 0x3B, 0x59, 0x59, 0xDD, 0x18, 0x88, 0x67, 0x97, 0x3F, 0xDF, 0x55, 0xD9},
							{0x23, 0x12, 0x4A, 0xEA, 0x7C, 0x04, 0x7C, 0xFD, 0x6A, 0x67, 0x68, 0x6F, 0x54, 0x1B, 0xD1, 0x81},
							{0x24, 0xA2, 0x42, 0x05, 0x94, 0x9E, 0x53, 0xC2, 0x02, 0x7D, 0xD5, 0x84, 0xBA, 0x1E, 0x2D, 0x7D},
							{0x24, 0xC4, 0x77, 0x51, 0xBF, 0x35, 0x80, 0x73, 0x74, 0xF0, 0xAC, 0x88, 0xA7, 0x22, 0xCD, 0x9D},
							{0x27, 0x30, 0xFE, 0x88, 0x13, 0xAF, 0x9A, 0xE1, 0xD9, 0x5F, 0x1B, 0x81, 0xC1, 0xFD, 0x07, 0x3B},
							{0x29, 0x63, 0x8C, 0x6C, 0x9F, 0x08, 0x07, 0xE0, 0xD3, 0xAB, 0xED, 0xB3, 0x01, 0x52, 0xAE, 0xC0},
							{0x2A, 0x05, 0xAC, 0x61, 0xD2, 0x10, 0x11, 0x89, 0xC5, 0x7A, 0x22, 0x08, 0xA7, 0xAA, 0x0A, 0xDB},
							{0x2A, 0x8B, 0xD0, 0x79, 0x67, 0x39, 0x46, 0xBA, 0x95, 0xC2, 0xE8, 0x83, 0x25, 0x0E, 0x74, 0x1D},
							{0x2A, 0x99, 0x73, 0xE5, 0xDD, 0xC5, 0xA4, 0x01, 0x50, 0xDE, 0x5D, 0x6C, 0xE9, 0x96, 0x6E, 0x12},
							{0x2A, 0xEC, 0x94, 0x38, 0x04, 0xB6, 0x91, 0x28, 0xC1, 0xA1, 0x50, 0xEF, 0x49, 0x9E, 0xE8, 0x02},
							{0x2E, 0x8F, 0xA2, 0xDC, 0x08, 0x15, 0xE3, 0x52, 0xDB, 0xA3, 0x77, 0xE6, 0xC8, 0x4D, 0x2D, 0x1C},
							{0x30, 0x19, 0xE7, 0xB7, 0x6A, 0xC4, 0xA3, 0x3B, 0xC4, 0xFC, 0x8E, 0x67, 0x6B, 0xC6, 0x1F, 0x6A},
							{0x31, 0xBE, 0xE8, 0x7C, 0xE0, 0x8F, 0xF2, 0x23, 0xCB, 0x92, 0x56, 0x45, 0x12, 0xC4, 0xF4, 0x15},
							{0x31, 0xF9, 0xA3, 0x1E, 0xF9, 0x04, 0xF1, 0x2C, 0x72, 0x58, 0x03, 0xE1, 0x62, 0xEF, 0x8E, 0x0E},
							{0x34, 0x68, 0x60, 0x28, 0x2B, 0x51, 0x17, 0x47, 0xCA, 0xAD, 0x25, 0x06, 0x89, 0xF1, 0xA0, 0xD1},
							{0x34, 0x8B, 0x2C, 0x01, 0xD1, 0xF3, 0x20, 0xE0, 0x3E, 0x43, 0x5C, 0xF1, 0x21, 0x56, 0x2D, 0xFE},
							{0x34, 0x92, 0x9B, 0xDB, 0xEB, 0x6E, 0x34, 0xA8, 0xBF, 0x1B, 0x45, 0xFA, 0x17, 0x62, 0x70, 0xC2},
							{0x36, 0x96, 0xB0, 0x06, 0xA1, 0x11, 0xA1, 0x87, 0x9D, 0x96, 0x1E, 0xE5, 0xDE, 0xBA, 0xC3, 0xB0},
							{0x37, 0x02, 0xC1, 0x2B, 0x96, 0x10, 0x43, 0x49, 0x1B, 0xF3, 0xE0, 0xEB, 0xBA, 0x02, 0xA1, 0x1E},
							{0x37, 0x20, 0xEE, 0x9C, 0xC5, 0x7A, 0x92, 0xC5, 0x8D, 0x2F, 0x05, 0x1A, 0x4E, 0xBA, 0x11, 0x92},
							{0x38, 0x0E, 0x75, 0xD2, 0x00, 0x9F, 0x0E, 0x83, 0xF9, 0xB7, 0x5A, 0x8A, 0x71, 0xD2, 0x99, 0x07},
							{0x39, 0xB7, 0x96, 0xF9, 0x4C, 0x9C, 0xEA, 0xCB, 0x2F, 0x2C, 0x4B, 0x64, 0x9A, 0xFE, 0x9B, 0xB8},
							{0x3A, 0x79, 0x47, 0x53, 0x2D, 0xF7, 0xD1, 0xD1, 0x0C, 0x76, 0xF1, 0xCF, 0x36, 0x57, 0x54, 0x5C},
							{0x3C, 0x0B, 0x94, 0xC7, 0x80, 0x49, 0x2D, 0xD9, 0x76, 0x43, 0xC5, 0x94, 0x25, 0xB3, 0x77, 0xEC},
							{0x3C, 0x29, 0x92, 0x6E, 0x5E, 0x2C, 0x08, 0xB5, 0xE7, 0x58, 0x24, 0x66, 0x58, 0x52, 0x8F, 0xDE},
							{0x3C, 0x35, 0x43, 0x1A, 0x55, 0x75, 0xDC, 0x97, 0xA2, 0x32, 0x02, 0x33, 0xF6, 0xBF, 0xDB, 0xB3},
							{0x3C, 0x63, 0xBF, 0x60, 0x77, 0x5B, 0xDF, 0xF9, 0xF7, 0x5A, 0x59, 0x4F, 0x94, 0xA1, 0x3C, 0x4A},
							{0x3C, 0x70, 0xED, 0x8A, 0xD0, 0x96, 0xD0, 0x77, 0xEB, 0xC5, 0xB9, 0x49, 0xD7, 0x80, 0xD2, 0x1B},
							{0x3C, 0xC7, 0x3B, 0x51, 0x47, 0x1D, 0x6A, 0xC0, 0x00, 0x03, 0xF6, 0xF8, 0x4D, 0x7F, 0xD6, 0xE1},
							{0x3E, 0xFF, 0xAC, 0x38, 0xB5, 0x24, 0x5D, 0x9B, 0x2D, 0xFE, 0xFA, 0x7B, 0x09, 0xC5, 0xB8, 0x75},
							{0x3F, 0x98, 0x69, 0xD5, 0xDE, 0x43, 0x60, 0x9E, 0x77, 0x4A, 0x66, 0x01, 0xD2, 0x3A, 0x6C, 0x5C},
							{0x41, 0xD2, 0x18, 0x41, 0x8B, 0x08, 0x40, 0x1A, 0xF9, 0x64, 0x9C, 0x21, 0x12, 0x64, 0x92, 0xC6},
							{0x42, 0x10, 0xFB, 0xDA, 0xE0, 0x88, 0x23, 0xC9, 0xD8, 0x04, 0xB2, 0xC3, 0x0B, 0x5D, 0xC5, 0x8B},
							{0x43, 0x4B, 0x51, 0xD3, 0xA6, 0x32, 0x9F, 0x1B, 0x9A, 0xF2, 0x68, 0x26, 0x92, 0x2B, 0xF6, 0x4B},
							{0x45, 0x04, 0x45, 0x82, 0xCE, 0x2C, 0x84, 0xD5, 0xD5, 0x1A, 0xB0, 0x52, 0x15, 0x18, 0x08, 0xE5},
							{0x45, 0x16, 0x94, 0x6D, 0x22, 0xC5, 0x87, 0x96, 0x2A, 0xB7, 0x70, 0x0B, 0x86, 0x60, 0xCC, 0x40},
							{0x46, 0x6A, 0xDF, 0xC4, 0xA1, 0xF2, 0x97, 0x67, 0xD6, 0x34, 0x84, 0x97, 0x99, 0x00, 0x3E, 0x34},
							{0x4A, 0x3F, 0x62, 0x17, 0xCE, 0xD7, 0xAD, 0x3C, 0xB7, 0x62, 0x94, 0x1A, 0xBA, 0xDB, 0xB1, 0x78},
							{0x4B, 0x70, 0xB1, 0xE6, 0x85, 0x12, 0x0C, 0x4A, 0xC6, 0x2C, 0x59, 0x0C, 0x6B, 0xCD, 0xB3, 0xF4},
							{0x4D, 0xC2, 0x46, 0x5D, 0x3D, 0x5E, 0x61, 0x7A, 0x32, 0xF4, 0x57, 0xBC, 0x7E, 0x77, 0xFD, 0x77},
							{0x4E, 0x37, 0xA8, 0x71, 0x0E, 0x00, 0xC3, 0x92, 0x41, 0x28, 0x35, 0x7D, 0x57, 0x14, 0x6F, 0x22},
							{0x4E, 0x91, 0x9E, 0xEA, 0x12, 0x8A, 0x34, 0x74, 0xB1, 0xEA, 0x84, 0x00, 0x3F, 0x51, 0xD5, 0x13},
							{0x4E, 0xAA, 0xE8, 0x88, 0xF1, 0x83, 0xDE, 0xEF, 0xB2, 0xF4, 0x28, 0x22, 0x30, 0xD2, 0x24, 0x2B},
							{0x4E, 0xF2, 0x10, 0xDA, 0xD2, 0x3B, 0xA6, 0xC6, 0x8B, 0x91, 0xD4, 0x0B, 0xD8, 0x86, 0x57, 0x86},
							{0x4F, 0xA3, 0x87, 0x27, 0xEC, 0x77, 0xF1, 0x21, 0xB4, 0x93, 0x86, 0x95, 0xAD, 0xC8, 0x84, 0xCC},
							{0x4F, 0xE9, 0xBE, 0x64, 0xAC, 0xEC, 0x76, 0xF0, 0xB7, 0xC0, 0x92, 0xDA, 0x45, 0xD5, 0x78, 0x6A},
							{0x55, 0x91, 0x35, 0x58, 0xBA, 0xE5, 0xCC, 0xC1, 0x85, 0x9E, 0x1A, 0x82, 0x9A, 0x9E, 0x4F, 0xFB},
							{0x57, 0x77, 0x57, 0xC6, 0xDD, 0x0B, 0x58, 0xC7, 0xAB, 0xB1, 0x7C, 0x91, 0x35, 0x7B, 0x08, 0xDA},
							{0x58, 0x35, 0xD8, 0x2D, 0xF5, 0x4D, 0x30, 0xB6, 0x86, 0x5B, 0xC5, 0x0B, 0xBB, 0x43, 0x6D, 0xF2},
							{0x59, 0x1D, 0x9F, 0x30, 0xD3, 0x43, 0x31, 0x7C, 0xDD, 0xD1, 0x6D, 0x60, 0x33, 0x92, 0xC6, 0x46},
							{0x5C, 0x36, 0x4B, 0xB1, 0x45, 0xFD, 0x59, 0xE9, 0x6A, 0x5A, 0x29, 0xFF, 0x76, 0xEF, 0xDF, 0x06},
							{0x5C, 0x7A, 0x64, 0x7C, 0xB2, 0xC2, 0xC4, 0xC1, 0xF7, 0x04, 0xC4, 0x39, 0x5E, 0x98, 0xB3, 0x25},
							{0x5D, 0x42, 0x01, 0x9C, 0x45, 0x72, 0xCD, 0xBE, 0x27, 0x10, 0x2C, 0x69, 0xB6, 0x92, 0x9A, 0xF2},
							{0x5D, 0xA0, 0xEA, 0x5F, 0x25, 0x3D, 0xB7, 0xB1, 0x00, 0x0E, 0x21, 0x13, 0xB5, 0xF9, 0x0F, 0x0A},
							{0x5D, 0xC3, 0xEC, 0xE8, 0xB9, 0x83, 0x11, 0xA3, 0x37, 0x24, 0x95, 0xF8, 0x1B, 0xE8, 0xCF, 0x80},
							{0x5E, 0x89, 0x2B, 0x14, 0x24, 0x4F, 0x7B, 0x37, 0x14, 0xDE, 0x7C, 0x92, 0x59, 0x17, 0xE6, 0xD8},
							{0x60, 0x50, 0xD7, 0x4D, 0xF4, 0xE1, 0xBE, 0x75, 0x05, 0x18, 0x68, 0xEA, 0xA5, 0xB9, 0xD9, 0x88},
							{0x60, 0xBD, 0x72, 0xF0, 0x65, 0xD9, 0x44, 0xCC, 0x4C, 0xFF, 0x16, 0x5A, 0xF1, 0x95, 0x9D, 0xD9},
							{0x60, 0xDB, 0x07, 0xBB, 0x6A, 0x5D, 0x7C, 0xE8, 0x19, 0xDF, 0xFC, 0xF8, 0x4E, 0xBA, 0xFA, 0x1F},
							{0x61, 0x48, 0xE7, 0x67, 0xE7, 0x1A, 0x90, 0x9A, 0xED, 0x23, 0x8F, 0x30, 0x6A, 0x00, 0x53, 0x0E},
							{0x63, 0x4C, 0x7C, 0x61, 0x39, 0x70, 0x3D, 0xCF, 0x41, 0xBB, 0xBC, 0x0B, 0x6B, 0x5D, 0xF1, 0xF5},
							{0x63, 0xE8, 0x57, 0x6B, 0xF4, 0xFC, 0x03, 0x26, 0x1E, 0x76, 0x57, 0x1B, 0x4D, 0x68, 0x2E, 0xDB},
							{0x64, 0x1B, 0xC2, 0xCE, 0x4C, 0xE6, 0x49, 0x8D, 0xEB, 0xE3, 0x86, 0x09, 0x30, 0xA3, 0xA0, 0x14},
							{0x65, 0xBF, 0x98, 0x2C, 0x29, 0x36, 0x95, 0xEC, 0xA3, 0x45, 0x4F, 0x89, 0xA3, 0xA8, 0xEA, 0x36},
							{0x68, 0x32, 0x7B, 0x01, 0xBD, 0x34, 0x1E, 0x31, 0xAC, 0x7E, 0x52, 0x49, 0xB2, 0x4B, 0x5C, 0xB9},
							{0x69, 0x4F, 0xE6, 0x33, 0x71, 0x4F, 0x85, 0x2B, 0x4D, 0x6F, 0x99, 0xBA, 0xA9, 0xA0, 0x46, 0xBB},
							{0x69, 0x6A, 0x85, 0x9C, 0xB8, 0xA4, 0x21, 0x4E, 0x06, 0x2B, 0xBB, 0x00, 0x0D, 0x96, 0xE0, 0x52},
							{0x69, 0x8D, 0xBF, 0x0D, 0xF8, 0xBF, 0x0F, 0x1F, 0xAE, 0x30, 0xA1, 0x7F, 0xBB, 0x07, 0x4D, 0x76},
							{0x6B, 0x65, 0x54, 0x87, 0x86, 0x52, 0x81, 0x93, 0xBB, 0xA7, 0x84, 0x7F, 0xC9, 0x33, 0x90, 0xC1},
							{0x6E, 0x09, 0xDF, 0x78, 0x06, 0xD5, 0x25, 0x93, 0x56, 0x6A, 0x16, 0x68, 0x42, 0x22, 0x8C, 0x9C},
							{0x6F, 0x46, 0xC9, 0x66, 0x0C, 0x4F, 0xBF, 0xA2, 0xE9, 0xAE, 0x1F, 0x5E, 0xDA, 0x98, 0x43, 0x5B},
							{0x6F, 0x60, 0x6D, 0x0F, 0x29, 0xE0, 0xFE, 0x16, 0xC7, 0xE2, 0x65, 0x3F, 0x7A, 0x40, 0xFE, 0x23},
							{0x70, 0x2C, 0xA4, 0xB1, 0xA1, 0xD3, 0x1F, 0x35, 0x0E, 0x1A, 0xD2, 0xC4, 0x61, 0x19, 0xA2, 0x83},
							{0x70, 0x5E, 0xE4, 0xC2, 0x8D, 0x17, 0xC5, 0x79, 0xEF, 0x14, 0x1E, 0xBE, 0x93, 0xF7, 0x7A, 0xE7},
							{0x71, 0x07, 0xAD, 0xE3, 0xAA, 0x0E, 0x1E, 0x66, 0x6F, 0x6D, 0x61, 0x4A, 0x3E, 0x2A, 0x0B, 0x4F},
							{0x71, 0x20, 0xA8, 0xA4, 0x25, 0xFA, 0x4D, 0x87, 0xA2, 0x26, 0x84, 0x3B, 0xF5, 0x6D, 0x4F, 0xE7},
							{0x71, 0xB7, 0xDF, 0x8F, 0x3D, 0x5B, 0xB4, 0xB1, 0x08, 0x41, 0x7D, 0xDD, 0x9D, 0x85, 0x37, 0xE6},
							{0x73, 0x31, 0x26, 0xD1, 0x25, 0xDE, 0x3B, 0x71, 0x10, 0x82, 0xDD, 0x02, 0x3A, 0x89, 0xD0, 0x45},
							{0x73, 0x4A, 0x63, 0xC3, 0xF6, 0x0A, 0xF2, 0xCD, 0x33, 0x65, 0x71, 0x1A, 0xC6, 0xA9, 0xC7, 0xD0},
							{0x74, 0xBE, 0x73, 0x4E, 0x04, 0xC0, 0x80, 0xC9, 0x05, 0x51, 0xFC, 0x0F, 0xED, 0xB1, 0xB0, 0xF7},
							{0x74, 0xD5, 0x80, 0xD4, 0xBC, 0x34, 0xA8, 0x6A, 0xA2, 0x0A, 0x04, 0x02, 0x45, 0x4C, 0xC1, 0x7B},
							{0x75, 0x80, 0xAC, 0x71, 0xC1, 0xBF, 0x56, 0xF8, 0x4B, 0x18, 0x04, 0x0B, 0x73, 0x61, 0xEC, 0xE3},
							{0x76, 0x41, 0x68, 0xBC, 0xE5, 0x2F, 0xAA, 0xB5, 0x8A, 0x89, 0xEA, 0xB9, 0x3B, 0xEC, 0x70, 0x86},
							{0x76, 0xA3, 0x25, 0x5D, 0x86, 0x3C, 0x16, 0x2B, 0x23, 0x9B, 0x98, 0x1B, 0xB6, 0x70, 0xC0, 0xC3},
							{0x78, 0xDC, 0x34, 0xE4, 0x04, 0x8F, 0x01, 0xDD, 0x15, 0x6A, 0x33, 0x72, 0x6B, 0x1D, 0x6B, 0x18},
							{0x7A, 0x83, 0x26, 0xF8, 0x2C, 0xF5, 0x6A, 0x24, 0xAE, 0xE8, 0x80, 0x4C, 0x34, 0xED, 0xC2, 0x3B},
							{0x7B, 0x50, 0x40, 0xA5, 0xD6, 0xFF, 0x54, 0x80, 0x7C, 0xB1, 0x37, 0x83, 0xF0, 0x6A, 0xEA, 0x92},
							{0x7B, 0x66, 0x6B, 0xEA, 0x76, 0x32, 0xD4, 0x60, 0x09, 0xD2, 0xB2, 0xA5, 0xC0, 0xA8, 0x84, 0xB5},
							{0x7C, 0xF4, 0x67, 0xEC, 0xCB, 0xC1, 0x52, 0x83, 0x15, 0xAB, 0xBD, 0x06, 0x0E, 0x71, 0xA3, 0x8A},
							{0x7E, 0xA4, 0x9E, 0xBE, 0x3B, 0xBA, 0x46, 0x05, 0x4B, 0x01, 0xBD, 0xB9, 0xDE, 0x27, 0xE1, 0xCA},
							{0x80, 0x6C, 0x3C, 0xAF, 0xD2, 0xBB, 0x4E, 0x4E, 0x17, 0xBD, 0xA2, 0xFB, 0xA0, 0xDC, 0xC5, 0xF6},
							{0x81, 0x12, 0xC7, 0xF1, 0x10, 0x70, 0x07, 0xF0, 0xF2, 0xA0, 0x66, 0x3F, 0xE6, 0x5C, 0xF2, 0x2D},
							{0x81, 0x84, 0xBA, 0x05, 0x34, 0x56, 0x64, 0x99, 0xCC, 0x8E, 0x23, 0xC6, 0x4A, 0xEB, 0xB6, 0xB8},
							{0x82, 0x51, 0xB6, 0x2F, 0xC0, 0x97, 0x63, 0x12, 0xA5, 0x8A, 0x62, 0xF1, 0xB6, 0x87, 0x6E, 0x1F},
							{0x84, 0x08, 0x2C, 0xA3, 0xBF, 0xC2, 0x5C, 0xC1, 0xF2, 0x65, 0xA0, 0x83, 0x75, 0x85, 0xF5, 0x94},
							{0x84, 0xBE, 0x9E, 0x6E, 0x8C, 0xB4, 0x26, 0x6B, 0xA7, 0x67, 0x77, 0xED, 0xCA, 0xF6, 0x98, 0x76},
							{0x85, 0x08, 0x6F, 0xFD, 0x9A, 0xA6, 0xC6, 0x8C, 0x5C, 0xB0, 0xE6, 0x32, 0x89, 0x94, 0x90, 0x10},
							{0x88, 0x0B, 0x25, 0x90, 0x2D, 0xD1, 0x70, 0x63, 0xAD, 0x12, 0x76, 0xEA, 0x9B, 0x81, 0x34, 0x0B},
							{0x88, 0x37, 0xD5, 0x5B, 0xAA, 0x3B, 0x4D, 0x60, 0x55, 0xFF, 0xEA, 0x3A, 0xB4, 0x80, 0xCD, 0xAC},
							{0x88, 0xC6, 0xF7, 0xBF, 0x87, 0xCB, 0x30, 0xE8, 0x08, 0xAE, 0x6C, 0x81, 0xC1, 0x07, 0xC9, 0xEB},
							{0x89, 0x66, 0x25, 0x21, 0x28, 0x66, 0xB7, 0x93, 0x03, 0x4F, 0x19, 0x1E, 0x8B, 0x9E, 0xC9, 0xC9},
							{0x8A, 0x1A, 0xBD, 0x2B, 0xB4, 0x82, 0xD0, 0x8A, 0x60, 0x10, 0xE8, 0x17, 0x20, 0x0A, 0x3B, 0x6F},
							{0x8A, 0x5B, 0x24, 0x1C, 0x65, 0xA8, 0x19, 0xA3, 0xC0, 0x0E, 0x41, 0x9B, 0x8C, 0xF9, 0x4D, 0x91},
							{0x8C, 0xBB, 0x29, 0x9F, 0xA3, 0xCC, 0xCE, 0x7A, 0x0F, 0x6D, 0x23, 0xB2, 0xE8, 0x6B, 0x22, 0x72},
							{0x8D, 0x20, 0xDD, 0x4A, 0xD8, 0xCD, 0x88, 0x9E, 0xC2, 0x18, 0x90, 0xE2, 0x6A, 0x28, 0x5D, 0xBE},
							{0x90, 0x81, 0x67, 0x2E, 0xAF, 0x74, 0xA9, 0xFF, 0x52, 0xEC, 0x79, 0x0C, 0x86, 0x64, 0xF6, 0x2C},
							{0x92, 0xD4, 0x61, 0xC7, 0x82, 0xA1, 0xA0, 0x28, 0x60, 0x3C, 0x89, 0xEC, 0xAC, 0x4C, 0x39, 0x61},
							{0x94, 0x0D, 0xF4, 0xF1, 0x37, 0xAD, 0x6C, 0x40, 0x76, 0x95, 0x14, 0x93, 0x57, 0x12, 0xA5, 0x60},
							{0x95, 0x08, 0x2C, 0x2C, 0x71, 0xDA, 0x51, 0xFA, 0xF0, 0x0E, 0x93, 0x63, 0x3E, 0x35, 0xB6, 0x6E},
							{0x95, 0x1C, 0x02, 0x53, 0x10, 0xE6, 0x26, 0x38, 0x1C, 0x33, 0x27, 0x5A, 0x91, 0xAE, 0x61, 0x49},
							{0x95, 0x5F, 0x7A, 0xD4, 0xD1, 0x04, 0xAC, 0xA0, 0xA0, 0x0D, 0x2F, 0x04, 0xFC, 0x03, 0x72, 0x2F},
							{0x95, 0xA9, 0xC3, 0x84, 0xC2, 0xC0, 0x3B, 0x98, 0xA5, 0x60, 0xE3, 0x77, 0x25, 0xC7, 0x02, 0xB5},
							{0x96, 0x20, 0x92, 0xD7, 0xAC, 0x67, 0x05, 0xFD, 0x22, 0xC4, 0x98, 0x4D, 0x44, 0xB6, 0x09, 0x9D},
							{0x96, 0xA1, 0xA9, 0x5D, 0x92, 0x5E, 0x40, 0xC3, 0x6F, 0x3D, 0xA9, 0xA5, 0xC5, 0x1C, 0x44, 0xE6},
							{0x97, 0x87, 0xF6, 0x3A, 0xA6, 0x79, 0xBC, 0xB7, 0x94, 0x43, 0x87, 0xCC, 0xAE, 0x79, 0xC5, 0x6D},
							{0x98, 0x37, 0xE0, 0xF9, 0xA2, 0x46, 0x50, 0xE6, 0x75, 0x4C, 0xB9, 0x57, 0x96, 0x09, 0x15, 0x57},
							{0x98, 0xC5, 0x37, 0xB8, 0x55, 0x19, 0x40, 0x21, 0x6D, 0x57, 0x96, 0x1F, 0x07, 0xF5, 0x78, 0x93},
							{0x99, 0x35, 0xE3, 0x02, 0xA0, 0x05, 0x08, 0x3D, 0x27, 0x15, 0xDE, 0x29, 0x84, 0x23, 0xA0, 0x98},
							{0x99, 0x52, 0x8B, 0x97, 0xC1, 0x5E, 0xF4, 0x41, 0x5C, 0xDE, 0xC8, 0xCC, 0x0C, 0x3B, 0x07, 0xFC},
							{0x9A, 0xA1, 0xE0, 0x9E, 0xCE, 0x91, 0x6E, 0x6B, 0xFA, 0x02, 0xF4, 0xEE, 0xB2, 0x91, 0x47, 0x69},
							{0x9B, 0x2E, 0xD1, 0x21, 0x2B, 0x23, 0xAE, 0x15, 0xD1, 0x86, 0x4F, 0xAB, 0x6F, 0xB3, 0x25, 0x25},
							{0x9C, 0x36, 0xEC, 0x4D, 0x6C, 0x17, 0x11, 0xE1, 0xA1, 0x37, 0x10, 0xCD, 0x7D, 0x4E, 0xDB, 0x63},
							{0x9F, 0x14, 0x9A, 0x4C, 0xA2, 0xC8, 0xAE, 0x71, 0x21, 0x26, 0xCA, 0x90, 0xF1, 0x76, 0xC5, 0x81},
							{0x9F, 0x98, 0xF2, 0xDF, 0xD4, 0x95, 0x52, 0x5C, 0xE9, 0x8B, 0x0C, 0x03, 0xFA, 0xD4, 0x5C, 0x5A},
							{0x9F, 0xB0, 0x73, 0xE0, 0x4F, 0x55, 0x82, 0xF8, 0x56, 0xCA, 0xC1, 0xD4, 0x34, 0xF2, 0xCF, 0xF3},
							{0xA0, 0x27, 0x42, 0xAC, 0x01, 0xE9, 0x49, 0x4B, 0x09, 0x7E, 0x7A, 0x28, 0x0F, 0x89, 0x5E, 0x4F},
							{0xA0, 0xD6, 0x73, 0x9B, 0xF3, 0x7D, 0x4A, 0x04, 0xB6, 0x8C, 0x9F, 0xB6, 0x13, 0x7D, 0xA0, 0x80},
							{0xA1, 0x2A, 0xDC, 0x8A, 0xBC, 0x3A, 0x7F, 0x7A, 0x89, 0xD6, 0xCA, 0xCD, 0x68, 0xCB, 0xFD, 0xDB},
							{0xA1, 0x9D, 0x26, 0x92, 0xAB, 0xB1, 0xD2, 0x1B, 0xCD, 0x88, 0x35, 0x4B, 0x42, 0x44, 0xA7, 0x92},
							{0xA3, 0x7D, 0x10, 0xF0, 0x7C, 0xBA, 0x93, 0x12, 0x83, 0x3E, 0x2F, 0xAB, 0x22, 0xF5, 0xA6, 0xFA},
							{0xA4, 0x77, 0xC6, 0x02, 0x94, 0x4D, 0xCB, 0x92, 0x6B, 0xEB, 0xB3, 0xA2, 0x37, 0xF1, 0x70, 0x59},
							{0xA6, 0xD1, 0xED, 0x9D, 0x41, 0x90, 0xD0, 0xB1, 0xCB, 0xBB, 0x62, 0x14, 0x7D, 0x3A, 0xB3, 0xE7},
							{0xA7, 0xFC, 0xA8, 0x77, 0xE1, 0x18, 0x02, 0xD2, 0xD2, 0x85, 0x20, 0x87, 0x7C, 0x1A, 0x3B, 0x25},
							{0xA9, 0x46, 0xC1, 0xC8, 0x42, 0x7C, 0x1D, 0x8C, 0x84, 0x63, 0xA0, 0xE3, 0x1F, 0xC1, 0x1A, 0xB2},
							{0xAB, 0xCE, 0x5C, 0x83, 0x48, 0xC9, 0x4C, 0x62, 0xF8, 0x07, 0x5C, 0x7B, 0x0E, 0x13, 0xBB, 0x3A},
							{0xAD, 0x58, 0xA8, 0xFC, 0x2C, 0xC3, 0x62, 0x15, 0x9C, 0x88, 0x9F, 0xC3, 0xA7, 0x84, 0x4D, 0xE2},
							{0xAE, 0x36, 0x4C, 0x95, 0x69, 0x83, 0xDB, 0x32, 0x26, 0x5D, 0xCF, 0x5D, 0x92, 0xB4, 0xBE, 0xED},
							{0xAE, 0xC0, 0x08, 0x48, 0xB2, 0xBF, 0x7A, 0xC5, 0xAD, 0x4F, 0xD1, 0x83, 0x57, 0xB8, 0x6B, 0x08},
							{0xB1, 0x09, 0x12, 0x88, 0x0A, 0x37, 0xB9, 0xD9, 0x62, 0xCE, 0x83, 0xCF, 0xCE, 0xCE, 0x2A, 0x6C},
							{0xB1, 0x40, 0xC9, 0xBD, 0xD1, 0x61, 0xA8, 0xBF, 0xAF, 0x7A, 0x70, 0xDD, 0xC2, 0x84, 0x90, 0x60},
							{0xB1, 0xEC, 0x99, 0xD2, 0xAB, 0xCA, 0xB3, 0x2D, 0xB5, 0x22, 0xBA, 0x9E, 0x07, 0xD3, 0x67, 0x7C},
							{0xB1, 0xF9, 0x67, 0x46, 0x69, 0x08, 0x41, 0x6F, 0xEB, 0x9A, 0x4A, 0x1E, 0xB7, 0x1D, 0x86, 0xC6},
							{0xB2, 0x23, 0x48, 0x89, 0x28, 0xEE, 0x76, 0xA5, 0x70, 0x7A, 0xCE, 0xA4, 0xF7, 0x39, 0x57, 0xC7},
							{0xB2, 0x6B, 0x09, 0x40, 0xE9, 0x07, 0x68, 0xE4, 0x83, 0xD0, 0xEE, 0x8F, 0xCE, 0xDD, 0xFA, 0xA4},
							{0xB3, 0xD7, 0x97, 0x18, 0xFD, 0x64, 0xE4, 0x4F, 0xA6, 0xF3, 0xCC, 0x4E, 0xDE, 0x5D, 0x35, 0xF0},
							{0xB4, 0x91, 0x76, 0x58, 0x98, 0xD6, 0xDC, 0xF2, 0x2B, 0x32, 0xD5, 0x52, 0xF1, 0x84, 0xC2, 0x9B},
							{0xB7, 0xE3, 0xE0, 0x59, 0xD9, 0xAB, 0x5F, 0x0C, 0xAA, 0xC6, 0x2F, 0xB7, 0x6B, 0x9D, 0xFB, 0x75},
							{0xBA, 0xE0, 0x99, 0x67, 0xAE, 0xD6, 0x4F, 0x19, 0x8F, 0xD3, 0x97, 0x51, 0xA6, 0x5B, 0x73, 0x1E},
							{0xBC, 0x00, 0x9B, 0xAE, 0x20, 0x28, 0x62, 0x60, 0x01, 0xF2, 0xB7, 0x50, 0xE6, 0x5A, 0x47, 0xCE},
							{0xBC, 0xA3, 0x3B, 0x51, 0xB5, 0x71, 0xE0, 0x4D, 0xDA, 0x27, 0x9C, 0x37, 0xAD, 0xF3, 0xFA, 0xE5},
							{0xBD, 0x95, 0xBE, 0x3A, 0x66, 0x9D, 0x77, 0x50, 0x1C, 0x19, 0xA9, 0xDE, 0xD7, 0xB1, 0x51, 0x7D},
							{0xBD, 0xF4, 0x7B, 0x54, 0x66, 0x5D, 0x18, 0x4A, 0xAC, 0x30, 0x61, 0xC3, 0x79, 0x3A, 0x7B, 0xE7},
							{0xBE, 0x1D, 0xA9, 0x44, 0xBB, 0xD7, 0x98, 0x6E, 0x57, 0xBC, 0x7D, 0x30, 0x6C, 0x53, 0xA4, 0x63},
							{0xBF, 0xB0, 0xF7, 0x0B, 0x0B, 0x8A, 0x47, 0x47, 0x8A, 0xC5, 0x10, 0x2B, 0x55, 0x05, 0xCA, 0x94},
							{0xC1, 0x12, 0x3A, 0xD7, 0xC5, 0x94, 0xBA, 0x09, 0x75, 0xAD, 0xED, 0x15, 0xE3, 0x2C, 0x0B, 0x14},
							{0xC1, 0x51, 0xF1, 0x8E, 0x92, 0x74, 0x9D, 0x0C, 0xCF, 0x4B, 0x77, 0x42, 0xCD, 0xE2, 0xC1, 0x87},
							{0xC1, 0x70, 0xEE, 0xBB, 0x93, 0x4E, 0x5A, 0xBD, 0x97, 0x37, 0x2C, 0x0D, 0xE0, 0x57, 0x42, 0x23},
							{0xC2, 0x7F, 0x42, 0xD2, 0xC5, 0x5B, 0x80, 0x91, 0x25, 0x74, 0x01, 0x32, 0xD3, 0x23, 0x60, 0xE8},
							{0xC5, 0x10, 0xCC, 0x1D, 0xB8, 0xC7, 0x9C, 0xB5, 0x6F, 0xE4, 0xDA, 0x1D, 0x8A, 0xEE, 0x71, 0x6E},
							{0xC7, 0x1A, 0x90, 0xF3, 0x63, 0x32, 0xBA, 0x0A, 0x18, 0x9B, 0x7E, 0x7E, 0xDE, 0xFD, 0x42, 0xEC},
							{0xC7, 0x9B, 0x35, 0xC0, 0x97, 0x36, 0x75, 0xAE, 0x67, 0x7C, 0xE1, 0x98, 0x67, 0x88, 0x76, 0x6A},
							{0xC8, 0x0E, 0xCB, 0xCE, 0x01, 0xB2, 0xA4, 0x1C, 0xAB, 0xC3, 0x15, 0x95, 0x6B, 0xDD, 0x26, 0xB0},
							{0xC8, 0x19, 0xB0, 0x5B, 0xD5, 0xC8, 0x84, 0x91, 0x34, 0x26, 0xBF, 0xF3, 0x37, 0xFE, 0x04, 0x68},
							{0xC8, 0x19, 0xE1, 0x53, 0x7F, 0xA7, 0xB0, 0xE7, 0x08, 0x2A, 0xB6, 0x2D, 0x72, 0x2E, 0xE0, 0x1F},
							{0xCB, 0x61, 0x18, 0x89, 0xBD, 0xA6, 0xDF, 0x84, 0xF3, 0x0F, 0x7D, 0x74, 0x5A, 0x48, 0xA3, 0x0F},
							{0xCE, 0x24, 0xEC, 0xDF, 0x88, 0x7C, 0xA0, 0x16, 0xE7, 0x85, 0xF8, 0xA4, 0x52, 0x02, 0x6D, 0xCB},
							{0xCF, 0xA6, 0xEE, 0x85, 0xF9, 0x6F, 0xD3, 0xED, 0xF2, 0x64, 0xFB, 0x69, 0x0B, 0x97, 0xC5, 0xD0},
							{0xD0, 0x73, 0x60, 0x6D, 0x21, 0x2E, 0x1D, 0xD4, 0x1F, 0x7C, 0xE9, 0x6F, 0xD8, 0xE6, 0xB2, 0xF5},
							{0xD4, 0x2D, 0xC6, 0xED, 0x90, 0x1F, 0xA7, 0x77, 0x18, 0xEB, 0x74, 0x6E, 0xA6, 0x74, 0x16, 0x79},
							{0xD7, 0x10, 0xA7, 0x35, 0xF8, 0x53, 0xEC, 0xCE, 0x3A, 0xE6, 0x76, 0x6B, 0x59, 0xA1, 0x59, 0xEB},
							{0xD7, 0x85, 0x4D, 0x20, 0x09, 0xF2, 0xF4, 0x40, 0x41, 0xC0, 0x41, 0xE0, 0x64, 0x56, 0xA7, 0x84},
							{0xD8, 0x78, 0x04, 0x1E, 0xFB, 0xAD, 0x62, 0x89, 0xBD, 0x75, 0x1C, 0xD0, 0xC9, 0x3A, 0xCD, 0x3C},
							{0xD9, 0x42, 0x54, 0xA0, 0xA4, 0xA0, 0x9D, 0x6B, 0x53, 0xD5, 0x6E, 0x33, 0x70, 0xEF, 0x88, 0xAA},
							{0xD9, 0xD1, 0x30, 0x7F, 0xDA, 0xAB, 0xAA, 0xFD, 0x0B, 0x08, 0xCA, 0x3E, 0x53, 0xD6, 0x40, 0xA6},
							{0xDA, 0x53, 0xC3, 0x52, 0x6C, 0x32, 0xCC, 0x47, 0x44, 0x9D, 0x52, 0xEA, 0xF2, 0xE3, 0xAD, 0x31},
							{0xDA, 0x59, 0x52, 0x8F, 0x36, 0x56, 0x7E, 0x95, 0x99, 0xC4, 0x79, 0x6D, 0xC2, 0x83, 0x98, 0xAD},
							{0xDB, 0xC8, 0xD8, 0xA1, 0x8E, 0x7F, 0x5A, 0xF8, 0x19, 0x4D, 0x39, 0xED, 0x73, 0x73, 0x83, 0x3C},
							{0xDC, 0x56, 0x73, 0xC7, 0x69, 0x8F, 0xB8, 0x35, 0x83, 0xC9, 0x0F, 0xA2, 0x82, 0xBE, 0xB3, 0x0D},
							{0xDE, 0xB2, 0xD8, 0x67, 0x8F, 0x7C, 0x8D, 0x53, 0xF0, 0x32, 0x69, 0xBC, 0x0B, 0x7F, 0x0F, 0xBE},
							{0xDF, 0x64, 0xAB, 0x0E, 0x48, 0x9F, 0xCE, 0x74, 0x91, 0xD4, 0xBF, 0x5D, 0xC5, 0x66, 0x68, 0xFB},
							{0xE0, 0xB2, 0x5B, 0xF2, 0x20, 0x16, 0x9E, 0xB7, 0x4D, 0x07, 0x79, 0x64, 0x48, 0x54, 0x94, 0x4D},
							{0xE1, 0x80, 0xDD, 0x9B, 0x1E, 0x9E, 0x2F, 0xF0, 0xC7, 0x81, 0xED, 0x2A, 0xB0, 0xB8, 0xCC, 0x37},
							{0xE1, 0x9E, 0xB9, 0x2C, 0x1A, 0x5A, 0x5E, 0x08, 0x04, 0xAE, 0x90, 0xE6, 0x1E, 0x5C, 0xAC, 0xFD},
							{0xE3, 0xD0, 0x1E, 0x1F, 0xC9, 0xD4, 0x1A, 0x76, 0x78, 0x74, 0x97, 0xFA, 0x4F, 0x36, 0x32, 0xDC},
							{0xE4, 0x9D, 0x18, 0x0A, 0x43, 0x8A, 0x13, 0xBB, 0xCC, 0xCA, 0x94, 0x96, 0xFA, 0x9A, 0xB0, 0x18},
							{0xE5, 0x50, 0xC0, 0x3A, 0x36, 0x00, 0x1F, 0xD0, 0x98, 0xB4, 0x32, 0xBD, 0x05, 0x2D, 0xEC, 0x66},
							{0xE6, 0x82, 0xBF, 0x34, 0x14, 0x84, 0xC2, 0xA4, 0xEE, 0x4B, 0xF0, 0x0C, 0x2B, 0xAE, 0xF2, 0xF6},
							{0xE7, 0x25, 0x15, 0x95, 0x71, 0x30, 0x9E, 0xA3, 0x5D, 0xED, 0x2E, 0xE8, 0x00, 0x53, 0xCC, 0xB1},
							{0xE7, 0x61, 0x7B, 0x34, 0xD2, 0xD7, 0xF6, 0x45, 0x70, 0xB5, 0xA3, 0xA6, 0x32, 0x1F, 0x1D, 0xF0},
							{0xE7, 0x82, 0xD4, 0x14, 0x61, 0x44, 0x6A, 0x5B, 0x80, 0x5F, 0xDF, 0x0C, 0x30, 0x97, 0x7A, 0x2B},
							{0xE7, 0xDC, 0x0E, 0xEE, 0x7D, 0x1D, 0xC7, 0x1A, 0xED, 0x4B, 0x59, 0x9E, 0x96, 0xB3, 0x61, 0xBA},
							{0xE9, 0x03, 0x3F, 0x1F, 0x2C, 0x18, 0x71, 0x9E, 0x95, 0xA8, 0x30, 0x0A, 0xD2, 0x47, 0xA3, 0xD8},
							{0xEA, 0x88, 0x98, 0xBA, 0x6D, 0xDD, 0x8A, 0x2A, 0x5F, 0x1C, 0x08, 0xA6, 0x9E, 0xC4, 0x6F, 0x05},
							{0xEA, 0xE2, 0x43, 0xBD, 0x8B, 0x7F, 0xD3, 0x40, 0xC1, 0x04, 0x86, 0x15, 0x44, 0x1A, 0x77, 0x0E},
							{0xEA, 0xE4, 0xDF, 0x3A, 0xE5, 0x77, 0xDB, 0xB5, 0x74, 0x69, 0x58, 0x40, 0x15, 0x7F, 0x1B, 0x19},
							{0xEB, 0xC7, 0x22, 0x0B, 0xE7, 0x46, 0x9B, 0x17, 0x9E, 0x8F, 0x46, 0x73, 0x7B, 0xEB, 0xA9, 0x88},
							{0xEC, 0x2C, 0x2D, 0xF6, 0x2A, 0x2F, 0x34, 0x92, 0x9E, 0xF2, 0xFC, 0x0B, 0x0F, 0x51, 0x72, 0x54},
							{0xEC, 0x4C, 0x2D, 0x3E, 0xEE, 0xD5, 0x73, 0x95, 0x59, 0xD3, 0x6E, 0x94, 0xCD, 0xE4, 0x0F, 0x8A},
							{0xF0, 0x5E, 0x4C, 0x17, 0x3E, 0x76, 0x0A, 0x48, 0xF4, 0x3D, 0x29, 0x0A, 0x6A, 0xE0, 0x32, 0xC7},
							{0xF0, 0x76, 0xAC, 0x49, 0x95, 0xCF, 0x07, 0xC2, 0xEF, 0x61, 0xA1, 0x3D, 0xD5, 0xA8, 0x57, 0xE2},
							{0xF0, 0x83, 0xDB, 0xC1, 0x71, 0x00, 0x85, 0x20, 0x74, 0x43, 0x0B, 0x9D, 0xE3, 0xDB, 0xC5, 0x4B},
							{0xF0, 0xBC, 0x07, 0x10, 0xFE, 0x15, 0x5D, 0x54, 0xB8, 0xF8, 0x57, 0xEC, 0x15, 0x2F, 0x66, 0x35},
							{0xF1, 0x29, 0xEB, 0xC3, 0xCE, 0x28, 0xD2, 0xF7, 0x26, 0x88, 0x92, 0xE5, 0xF0, 0x09, 0x91, 0x82},
							{0xF1, 0x6C, 0xC3, 0xB2, 0x61, 0x0C, 0x10, 0x7C, 0x28, 0x07, 0x73, 0xCB, 0xE9, 0x39, 0x1A, 0x9B},
							{0xF2, 0x83, 0xFB, 0x7E, 0x0F, 0x98, 0x93, 0xD1, 0xD1, 0x4F, 0xDC, 0x34, 0x39, 0xC9, 0x2D, 0xDD},
							{0xF2, 0x8F, 0xBE, 0x5F, 0x54, 0xE5, 0x26, 0x52, 0x9D, 0xCA, 0x86, 0xCE, 0x1B, 0xEB, 0x0D, 0x28},
							{0xF2, 0xB0, 0xA8, 0x40, 0xEC, 0x02, 0x23, 0xF1, 0x7D, 0xE6, 0x14, 0x53, 0xA6, 0x9D, 0xAA, 0x8C},
							{0xF2, 0xCF, 0x71, 0x8A, 0x7F, 0x9B, 0x40, 0xBC, 0x8C, 0x6F, 0x92, 0x44, 0x64, 0x20, 0xAA, 0x1C},
							{0xF3, 0xA5, 0x0E, 0x40, 0x2B, 0x5D, 0xA7, 0xA1, 0xBF, 0x9A, 0x27, 0x60, 0xDB, 0x56, 0xAB, 0x99},
							{0xF3, 0xC7, 0xAD, 0x73, 0x01, 0xAB, 0x1B, 0x21, 0x60, 0xA7, 0x4B, 0x07, 0x76, 0x16, 0xB9, 0x2D},
							{0xF4, 0x35, 0x80, 0x7C, 0xB2, 0x33, 0x83, 0xE3, 0xE4, 0xAE, 0xAE, 0x60, 0x08, 0x81, 0xEA, 0x8F},
							{0xF5, 0x2F, 0x10, 0x1A, 0x52, 0x74, 0x4E, 0x50, 0xAE, 0xBD, 0xE8, 0x39, 0x1B, 0xDF, 0x10, 0x83},
							{0xF6, 0x13, 0xDE, 0xF9, 0xB1, 0x95, 0x94, 0xF3, 0x31, 0xC0, 0x53, 0xC3, 0x9D, 0xC4, 0xCF, 0x24},
							{0xF7, 0xED, 0x67, 0x7C, 0x4D, 0x82, 0x2B, 0xA6, 0x79, 0x46, 0x10, 0x68, 0xDB, 0xE1, 0x51, 0xF0},
							{0xF9, 0xE3, 0x36, 0xAB, 0x0F, 0xA5, 0xA7, 0x6B, 0x98, 0x3D, 0x7A, 0x99, 0xE9, 0x4D, 0xD6, 0xA0},
							{0xFA, 0xE1, 0x95, 0xD7, 0xC2, 0x5D, 0x64, 0x3C, 0xF6, 0x91, 0x7C, 0x98, 0x12, 0xA7, 0x78, 0xA9},
							{0xFD, 0x6F, 0xCD, 0xB6, 0x04, 0xD0, 0x56, 0x06, 0x59, 0x4F, 0x3E, 0xF4, 0x1A, 0xD3, 0x28, 0x4D},
							{0xFE, 0xC2, 0x7D, 0x4B, 0xCE, 0x3F, 0x20, 0x61, 0x0C, 0x78, 0x41, 0x35, 0x49, 0x57, 0x94, 0x6F},
							{0xFF, 0x60, 0x9E, 0x10, 0xA8, 0xEA, 0x2B, 0x09, 0x97, 0xF5, 0xB2, 0xA0, 0xB8, 0x3C, 0x51, 0x14},
							{0xFF, 0x72, 0xA0, 0xD3, 0x74, 0x67, 0xF7, 0xE9, 0xFE, 0xC7, 0x3B, 0xB9, 0x52, 0xBD, 0x75, 0x09},
							{0xFF, 0xEC, 0xE0, 0x85, 0xD8, 0x67, 0x7C, 0x17, 0x38, 0xA0, 0xA8, 0xDC, 0xBE, 0x7B, 0xB7, 0x67}};
							
}