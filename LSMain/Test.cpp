#include "stdafx.h"

namespace Test {

	
	BYTE Salts[256][16] = {{0x00, 0x17, 0x70, 0x74, 0x33, 0x6D, 0xC5, 0xF6, 0x54, 0x80, 0xCA, 0x5B, 0xD8, 0xE6, 0xA2, 0x1A},
							{0x02, 0x65, 0x49, 0x2F, 0x4B, 0xBE, 0xAB, 0x60, 0x13, 0x10, 0xD6, 0x38, 0xE0, 0xB5, 0x69, 0xC8},
							{0x06, 0x4A, 0x12, 0x4E, 0x53, 0x7C, 0x46, 0xFB, 0x37, 0x58, 0xED, 0xF8, 0x06, 0x3B, 0x27, 0xC9},
							{0x06, 0xF2, 0x8E, 0x01, 0x6F, 0x90, 0xBE, 0x67, 0x46, 0x51, 0xA9, 0xA4, 0x78, 0x6C, 0xA3, 0x10},
							{0x07, 0xFD, 0x26, 0xD4, 0x65, 0xFD, 0x06, 0xF4, 0xB5, 0xB6, 0x0F, 0x8E, 0x62, 0x78, 0x64, 0xB1},
							{0x09, 0xCF, 0xC4, 0x6D, 0x4F, 0x0E, 0x0D, 0xED, 0x3C, 0x17, 0x91, 0x7C, 0xF4, 0x81, 0x4B, 0x27},
							{0x0A, 0xA9, 0x86, 0x63, 0xE2, 0x47, 0x97, 0xB3, 0xDE, 0xFD, 0x22, 0x44, 0x4F, 0x36, 0x40, 0x04},
							{0x0B, 0xA7, 0xDD, 0x8C, 0x82, 0xB9, 0x49, 0x6A, 0xBB, 0xA9, 0x66, 0xC5, 0x74, 0x13, 0x34, 0x10},
							{0x0C, 0x17, 0xE1, 0x3A, 0x06, 0xFA, 0x84, 0x23, 0xEC, 0x55, 0x60, 0xE8, 0x18, 0x48, 0x53, 0x10},
							{0x0F, 0x15, 0x45, 0x2A, 0xDD, 0x8C, 0x70, 0x07, 0x45, 0xF5, 0x16, 0x85, 0xAF, 0x18, 0x51, 0x50},
							{0x10, 0x4C, 0x64, 0x5B, 0xA6, 0xA4, 0x2E, 0xDD, 0xDA, 0x3B, 0xB1, 0xB2, 0xA4, 0xAF, 0x8A, 0xB7},
							{0x10, 0x9E, 0x59, 0xE5, 0x46, 0xD3, 0x34, 0xD7, 0x4A, 0x86, 0xA7, 0xB2, 0x6B, 0x09, 0xB3, 0x79},
							{0x11, 0xEA, 0xC9, 0x34, 0xE6, 0x80, 0x86, 0x86, 0x64, 0x40, 0x95, 0xD8, 0x5A, 0x8D, 0x7D, 0x65},
							{0x15, 0x7C, 0x43, 0x18, 0x8F, 0xF6, 0xEC, 0xED, 0x7A, 0x37, 0x4E, 0xA1, 0xF4, 0xE5, 0x60, 0xC5},
							{0x15, 0x9C, 0x88, 0x4F, 0x94, 0x7A, 0x4A, 0x71, 0x54, 0xAE, 0x2D, 0xB2, 0xE0, 0xC1, 0xF5, 0x62},
							{0x17, 0x1F, 0x58, 0x6C, 0x0D, 0xC5, 0xA1, 0xDC, 0x4F, 0x22, 0x9C, 0x35, 0xB5, 0x3F, 0xEB, 0x7C},
							{0x18, 0x5B, 0xE6, 0xAD, 0xBF, 0x6B, 0xA8, 0x32, 0x53, 0x3F, 0x2D, 0x8C, 0x03, 0xAD, 0x95, 0x52},
							{0x18, 0x94, 0x89, 0xAB, 0x6C, 0xD2, 0xAB, 0xA1, 0xF0, 0xBD, 0x2C, 0x00, 0x71, 0x67, 0xF5, 0xF3},
							{0x19, 0xED, 0x6F, 0xE3, 0x69, 0xEC, 0xBD, 0xA5, 0x9F, 0x32, 0x91, 0x71, 0x66, 0x38, 0xE8, 0x77},
							{0x1B, 0x2C, 0x80, 0xD2, 0xCD, 0x98, 0xEB, 0x71, 0xE6, 0xF2, 0xE7, 0xF9, 0x10, 0x87, 0xC4, 0x2C},
							{0x1B, 0x87, 0x83, 0x5E, 0xAC, 0xBE, 0x83, 0x2C, 0x21, 0xD8, 0x29, 0xF6, 0x0A, 0xEF, 0x9B, 0xAF},
							{0x1B, 0xFA, 0x90, 0x49, 0x7A, 0xC4, 0x2C, 0xD1, 0x47, 0x82, 0x09, 0xE1, 0xD0, 0xE1, 0x26, 0xCC},
							{0x1C, 0x52, 0x3D, 0x40, 0xAB, 0x8F, 0x69, 0xEC, 0x13, 0xBA, 0xBB, 0x57, 0x0A, 0x73, 0x35, 0x03},
							{0x1C, 0x54, 0x09, 0x31, 0x03, 0x38, 0x3B, 0x08, 0x53, 0x66, 0x36, 0xB4, 0x21, 0x60, 0xDE, 0x69},
							{0x1C, 0x90, 0xDA, 0xDE, 0x9E, 0x4E, 0xE4, 0x7A, 0xDB, 0xB0, 0x41, 0x86, 0x79, 0x09, 0x99, 0x54},
							{0x1D, 0xDB, 0xB4, 0x50, 0xEA, 0xF7, 0x71, 0x36, 0xE7, 0xCB, 0x35, 0x20, 0x15, 0x8D, 0xE8, 0x03},
							{0x1D, 0xDC, 0xB1, 0xAB, 0xB8, 0x28, 0x4F, 0x68, 0x6E, 0x43, 0x5D, 0x47, 0x0A, 0x4B, 0x9C, 0x2F},
							{0x1D, 0xFF, 0xE9, 0xA0, 0x26, 0xF1, 0xC5, 0x3A, 0x29, 0x63, 0xF0, 0x57, 0x28, 0xCF, 0xE5, 0x71},
							{0x1E, 0x62, 0x48, 0x72, 0x92, 0xA4, 0x6E, 0xB2, 0xE4, 0x38, 0x53, 0xC1, 0x7C, 0x75, 0xE3, 0x17},
							{0x1E, 0xA2, 0x01, 0xFD, 0xC7, 0x4B, 0x14, 0xE2, 0xCA, 0x0D, 0x44, 0xC8, 0xEB, 0x66, 0x1F, 0xED},
							{0x1F, 0x13, 0xAF, 0x13, 0x64, 0xA7, 0x31, 0xD2, 0xDA, 0xD5, 0xE4, 0x13, 0x1B, 0x73, 0x7F, 0x75},
							{0x20, 0x85, 0x15, 0xDF, 0xC2, 0xBD, 0xAF, 0x18, 0xA9, 0xE5, 0xF7, 0xC1, 0xA0, 0x60, 0x98, 0x0D},
							{0x20, 0xD2, 0x8F, 0xB8, 0x09, 0x7C, 0xF5, 0x51, 0xA4, 0xA2, 0x79, 0x8E, 0xD4, 0xD4, 0x76, 0x62},
							{0x21, 0x3C, 0xAE, 0x1D, 0x8E, 0x2D, 0x4D, 0xCA, 0x56, 0x14, 0x96, 0xFB, 0xDA, 0x9A, 0x61, 0x7A},
							{0x21, 0x41, 0xF0, 0x7E, 0x68, 0x34, 0xB3, 0xF9, 0xE2, 0xB8, 0x9A, 0xEE, 0x80, 0x78, 0x21, 0xB2},
							{0x22, 0x4E, 0xB7, 0x61, 0x3B, 0x59, 0x59, 0xDD, 0x18, 0x88, 0x67, 0x97, 0x3F, 0xDF, 0x55, 0xD9},
							{0x23, 0x12, 0x4A, 0xEA, 0x7C, 0x04, 0x7C, 0xFD, 0x6A, 0x67, 0x68, 0x6F, 0x54, 0x1B, 0xD1, 0x81},
							{0x24, 0xA2, 0x42, 0x05, 0x94, 0x9E, 0x53, 0xC2, 0x02, 0x7D, 0xD5, 0x84, 0xBA, 0x1E, 0x2D, 0x7D},
							{0x24, 0xC4, 0x77, 0x51, 0xBF, 0x35, 0x80, 0x73, 0x74, 0xF0, 0xAC, 0x88, 0xA7, 0x22, 0xCD, 0x9D},
							{0x27, 0x30, 0xFE, 0x88, 0x13, 0xAF, 0x9A, 0xE1, 0xD9, 0x5F, 0x1B, 0x81, 0xC1, 0xFD, 0x07, 0x3B},
							{0x29, 0x63, 0x8C, 0x6C, 0x9F, 0x08, 0x07, 0xE0, 0xD3, 0xAB, 0xED, 0xB3, 0x01, 0x52, 0xAE, 0xC0},
							{0x2A, 0x05, 0xAC, 0x61, 0xD2, 0x10, 0x11, 0x89, 0xC5, 0x7A, 0x22, 0x08, 0xA7, 0xAA, 0x0A, 0xDB},
							{0x2A, 0x8B, 0xD0, 0x79, 0x67, 0x39, 0x46, 0xBA, 0x95, 0xC2, 0xE8, 0x83, 0x25, 0x0E, 0x74, 0x1D},
							{0x2A, 0x99, 0x73, 0xE5, 0xDD, 0xC5, 0xA4, 0x01, 0x50, 0xDE, 0x5D, 0x6C, 0xE9, 0x96, 0x6E, 0x12},
							{0x2A, 0xEC, 0x94, 0x38, 0x04, 0xB6, 0x91, 0x28, 0xC1, 0xA1, 0x50, 0xEF, 0x49, 0x9E, 0xE8, 0x02},
							{0x2E, 0x8F, 0xA2, 0xDC, 0x08, 0x15, 0xE3, 0x52, 0xDB, 0xA3, 0x77, 0xE6, 0xC8, 0x4D, 0x2D, 0x1C},
							{0x30, 0x19, 0xE7, 0xB7, 0x6A, 0xC4, 0xA3, 0x3B, 0xC4, 0xFC, 0x8E, 0x67, 0x6B, 0xC6, 0x1F, 0x6A},
							{0x31, 0xBE, 0xE8, 0x7C, 0xE0, 0x8F, 0xF2, 0x23, 0xCB, 0x92, 0x56, 0x45, 0x12, 0xC4, 0xF4, 0x15},
							{0x31, 0xF9, 0xA3, 0x1E, 0xF9, 0x04, 0xF1, 0x2C, 0x72, 0x58, 0x03, 0xE1, 0x62, 0xEF, 0x8E, 0x0E},
							{0x34, 0x68, 0x60, 0x28, 0x2B, 0x51, 0x17, 0x47, 0xCA, 0xAD, 0x25, 0x06, 0x89, 0xF1, 0xA0, 0xD1},
							{0x34, 0x8B, 0x2C, 0x01, 0xD1, 0xF3, 0x20, 0xE0, 0x3E, 0x43, 0x5C, 0xF1, 0x21, 0x56, 0x2D, 0xFE},
							{0x34, 0x92, 0x9B, 0xDB, 0xEB, 0x6E, 0x34, 0xA8, 0xBF, 0x1B, 0x45, 0xFA, 0x17, 0x62, 0x70, 0xC2},
							{0x36, 0x96, 0xB0, 0x06, 0xA1, 0x11, 0xA1, 0x87, 0x9D, 0x96, 0x1E, 0xE5, 0xDE, 0xBA, 0xC3, 0xB0},
							{0x37, 0x02, 0xC1, 0x2B, 0x96, 0x10, 0x43, 0x49, 0x1B, 0xF3, 0xE0, 0xEB, 0xBA, 0x02, 0xA1, 0x1E},
							{0x37, 0x20, 0xEE, 0x9C, 0xC5, 0x7A, 0x92, 0xC5, 0x8D, 0x2F, 0x05, 0x1A, 0x4E, 0xBA, 0x11, 0x92},
							{0x38, 0x0E, 0x75, 0xD2, 0x00, 0x9F, 0x0E, 0x83, 0xF9, 0xB7, 0x5A, 0x8A, 0x71, 0xD2, 0x99, 0x07},
							{0x39, 0xB7, 0x96, 0xF9, 0x4C, 0x9C, 0xEA, 0xCB, 0x2F, 0x2C, 0x4B, 0x64, 0x9A, 0xFE, 0x9B, 0xB8},
							{0x3A, 0x79, 0x47, 0x53, 0x2D, 0xF7, 0xD1, 0xD1, 0x0C, 0x76, 0xF1, 0xCF, 0x36, 0x57, 0x54, 0x5C},
							{0x3C, 0x0B, 0x94, 0xC7, 0x80, 0x49, 0x2D, 0xD9, 0x76, 0x43, 0xC5, 0x94, 0x25, 0xB3, 0x77, 0xEC},
							{0x3C, 0x29, 0x92, 0x6E, 0x5E, 0x2C, 0x08, 0xB5, 0xE7, 0x58, 0x24, 0x66, 0x58, 0x52, 0x8F, 0xDE},
							{0x3C, 0x35, 0x43, 0x1A, 0x55, 0x75, 0xDC, 0x97, 0xA2, 0x32, 0x02, 0x33, 0xF6, 0xBF, 0xDB, 0xB3},
							{0x3C, 0x63, 0xBF, 0x60, 0x77, 0x5B, 0xDF, 0xF9, 0xF7, 0x5A, 0x59, 0x4F, 0x94, 0xA1, 0x3C, 0x4A},
							{0x3C, 0x70, 0xED, 0x8A, 0xD0, 0x96, 0xD0, 0x77, 0xEB, 0xC5, 0xB9, 0x49, 0xD7, 0x80, 0xD2, 0x1B},
							{0x3C, 0xC7, 0x3B, 0x51, 0x47, 0x1D, 0x6A, 0xC0, 0x00, 0x03, 0xF6, 0xF8, 0x4D, 0x7F, 0xD6, 0xE1},
							{0x3E, 0xFF, 0xAC, 0x38, 0xB5, 0x24, 0x5D, 0x9B, 0x2D, 0xFE, 0xFA, 0x7B, 0x09, 0xC5, 0xB8, 0x75},
							{0x3F, 0x98, 0x69, 0xD5, 0xDE, 0x43, 0x60, 0x9E, 0x77, 0x4A, 0x66, 0x01, 0xD2, 0x3A, 0x6C, 0x5C},
							{0x41, 0xD2, 0x18, 0x41, 0x8B, 0x08, 0x40, 0x1A, 0xF9, 0x64, 0x9C, 0x21, 0x12, 0x64, 0x92, 0xC6},
							{0x42, 0x10, 0xFB, 0xDA, 0xE0, 0x88, 0x23, 0xC9, 0xD8, 0x04, 0xB2, 0xC3, 0x0B, 0x5D, 0xC5, 0x8B},
							{0x43, 0x4B, 0x51, 0xD3, 0xA6, 0x32, 0x9F, 0x1B, 0x9A, 0xF2, 0x68, 0x26, 0x92, 0x2B, 0xF6, 0x4B},
							{0x45, 0x04, 0x45, 0x82, 0xCE, 0x2C, 0x84, 0xD5, 0xD5, 0x1A, 0xB0, 0x52, 0x15, 0x18, 0x08, 0xE5},
							{0x45, 0x16, 0x94, 0x6D, 0x22, 0xC5, 0x87, 0x96, 0x2A, 0xB7, 0x70, 0x0B, 0x86, 0x60, 0xCC, 0x40},
							{0x46, 0x6A, 0xDF, 0xC4, 0xA1, 0xF2, 0x97, 0x67, 0xD6, 0x34, 0x84, 0x97, 0x99, 0x00, 0x3E, 0x34},
							{0x4A, 0x3F, 0x62, 0x17, 0xCE, 0xD7, 0xAD, 0x3C, 0xB7, 0x62, 0x94, 0x1A, 0xBA, 0xDB, 0xB1, 0x78},
							{0x4B, 0x70, 0xB1, 0xE6, 0x85, 0x12, 0x0C, 0x4A, 0xC6, 0x2C, 0x59, 0x0C, 0x6B, 0xCD, 0xB3, 0xF4},
							{0x4D, 0xC2, 0x46, 0x5D, 0x3D, 0x5E, 0x61, 0x7A, 0x32, 0xF4, 0x57, 0xBC, 0x7E, 0x77, 0xFD, 0x77},
							{0x4E, 0x37, 0xA8, 0x71, 0x0E, 0x00, 0xC3, 0x92, 0x41, 0x28, 0x35, 0x7D, 0x57, 0x14, 0x6F, 0x22},
							{0x4E, 0x91, 0x9E, 0xEA, 0x12, 0x8A, 0x34, 0x74, 0xB1, 0xEA, 0x84, 0x00, 0x3F, 0x51, 0xD5, 0x13},
							{0x4E, 0xAA, 0xE8, 0x88, 0xF1, 0x83, 0xDE, 0xEF, 0xB2, 0xF4, 0x28, 0x22, 0x30, 0xD2, 0x24, 0x2B},
							{0x4E, 0xF2, 0x10, 0xDA, 0xD2, 0x3B, 0xA6, 0xC6, 0x8B, 0x91, 0xD4, 0x0B, 0xD8, 0x86, 0x57, 0x86},
							{0x4F, 0xA3, 0x87, 0x27, 0xEC, 0x77, 0xF1, 0x21, 0xB4, 0x93, 0x86, 0x95, 0xAD, 0xC8, 0x84, 0xCC},
							{0x4F, 0xE9, 0xBE, 0x64, 0xAC, 0xEC, 0x76, 0xF0, 0xB7, 0xC0, 0x92, 0xDA, 0x45, 0xD5, 0x78, 0x6A},
							{0x55, 0x91, 0x35, 0x58, 0xBA, 0xE5, 0xCC, 0xC1, 0x85, 0x9E, 0x1A, 0x82, 0x9A, 0x9E, 0x4F, 0xFB},
							{0x57, 0x77, 0x57, 0xC6, 0xDD, 0x0B, 0x58, 0xC7, 0xAB, 0xB1, 0x7C, 0x91, 0x35, 0x7B, 0x08, 0xDA},
							{0x58, 0x35, 0xD8, 0x2D, 0xF5, 0x4D, 0x30, 0xB6, 0x86, 0x5B, 0xC5, 0x0B, 0xBB, 0x43, 0x6D, 0xF2},
							{0x59, 0x1D, 0x9F, 0x30, 0xD3, 0x43, 0x31, 0x7C, 0xDD, 0xD1, 0x6D, 0x60, 0x33, 0x92, 0xC6, 0x46},
							{0x5C, 0x36, 0x4B, 0xB1, 0x45, 0xFD, 0x59, 0xE9, 0x6A, 0x5A, 0x29, 0xFF, 0x76, 0xEF, 0xDF, 0x06},
							{0x5C, 0x7A, 0x64, 0x7C, 0xB2, 0xC2, 0xC4, 0xC1, 0xF7, 0x04, 0xC4, 0x39, 0x5E, 0x98, 0xB3, 0x25},
							{0x5D, 0x42, 0x01, 0x9C, 0x45, 0x72, 0xCD, 0xBE, 0x27, 0x10, 0x2C, 0x69, 0xB6, 0x92, 0x9A, 0xF2},
							{0x5D, 0xA0, 0xEA, 0x5F, 0x25, 0x3D, 0xB7, 0xB1, 0x00, 0x0E, 0x21, 0x13, 0xB5, 0xF9, 0x0F, 0x0A},
							{0x5D, 0xC3, 0xEC, 0xE8, 0xB9, 0x83, 0x11, 0xA3, 0x37, 0x24, 0x95, 0xF8, 0x1B, 0xE8, 0xCF, 0x80},
							{0x5E, 0x89, 0x2B, 0x14, 0x24, 0x4F, 0x7B, 0x37, 0x14, 0xDE, 0x7C, 0x92, 0x59, 0x17, 0xE6, 0xD8},
							{0x60, 0x50, 0xD7, 0x4D, 0xF4, 0xE1, 0xBE, 0x75, 0x05, 0x18, 0x68, 0xEA, 0xA5, 0xB9, 0xD9, 0x88},
							{0x60, 0xBD, 0x72, 0xF0, 0x65, 0xD9, 0x44, 0xCC, 0x4C, 0xFF, 0x16, 0x5A, 0xF1, 0x95, 0x9D, 0xD9},
							{0x60, 0xDB, 0x07, 0xBB, 0x6A, 0x5D, 0x7C, 0xE8, 0x19, 0xDF, 0xFC, 0xF8, 0x4E, 0xBA, 0xFA, 0x1F},
							{0x61, 0x48, 0xE7, 0x67, 0xE7, 0x1A, 0x90, 0x9A, 0xED, 0x23, 0x8F, 0x30, 0x6A, 0x00, 0x53, 0x0E},
							{0x63, 0x4C, 0x7C, 0x61, 0x39, 0x70, 0x3D, 0xCF, 0x41, 0xBB, 0xBC, 0x0B, 0x6B, 0x5D, 0xF1, 0xF5},
							{0x63, 0xE8, 0x57, 0x6B, 0xF4, 0xFC, 0x03, 0x26, 0x1E, 0x76, 0x57, 0x1B, 0x4D, 0x68, 0x2E, 0xDB},
							{0x64, 0x1B, 0xC2, 0xCE, 0x4C, 0xE6, 0x49, 0x8D, 0xEB, 0xE3, 0x86, 0x09, 0x30, 0xA3, 0xA0, 0x14},
							{0x65, 0xBF, 0x98, 0x2C, 0x29, 0x36, 0x95, 0xEC, 0xA3, 0x45, 0x4F, 0x89, 0xA3, 0xA8, 0xEA, 0x36},
							{0x68, 0x32, 0x7B, 0x01, 0xBD, 0x34, 0x1E, 0x31, 0xAC, 0x7E, 0x52, 0x49, 0xB2, 0x4B, 0x5C, 0xB9},
							{0x69, 0x4F, 0xE6, 0x33, 0x71, 0x4F, 0x85, 0x2B, 0x4D, 0x6F, 0x99, 0xBA, 0xA9, 0xA0, 0x46, 0xBB},
							{0x69, 0x6A, 0x85, 0x9C, 0xB8, 0xA4, 0x21, 0x4E, 0x06, 0x2B, 0xBB, 0x00, 0x0D, 0x96, 0xE0, 0x52},
							{0x69, 0x8D, 0xBF, 0x0D, 0xF8, 0xBF, 0x0F, 0x1F, 0xAE, 0x30, 0xA1, 0x7F, 0xBB, 0x07, 0x4D, 0x76},
							{0x6B, 0x65, 0x54, 0x87, 0x86, 0x52, 0x81, 0x93, 0xBB, 0xA7, 0x84, 0x7F, 0xC9, 0x33, 0x90, 0xC1},
							{0x6E, 0x09, 0xDF, 0x78, 0x06, 0xD5, 0x25, 0x93, 0x56, 0x6A, 0x16, 0x68, 0x42, 0x22, 0x8C, 0x9C},
							{0x6F, 0x46, 0xC9, 0x66, 0x0C, 0x4F, 0xBF, 0xA2, 0xE9, 0xAE, 0x1F, 0x5E, 0xDA, 0x98, 0x43, 0x5B},
							{0x6F, 0x60, 0x6D, 0x0F, 0x29, 0xE0, 0xFE, 0x16, 0xC7, 0xE2, 0x65, 0x3F, 0x7A, 0x40, 0xFE, 0x23},
							{0x70, 0x2C, 0xA4, 0xB1, 0xA1, 0xD3, 0x1F, 0x35, 0x0E, 0x1A, 0xD2, 0xC4, 0x61, 0x19, 0xA2, 0x83},
							{0x70, 0x5E, 0xE4, 0xC2, 0x8D, 0x17, 0xC5, 0x79, 0xEF, 0x14, 0x1E, 0xBE, 0x93, 0xF7, 0x7A, 0xE7},
							{0x71, 0x07, 0xAD, 0xE3, 0xAA, 0x0E, 0x1E, 0x66, 0x6F, 0x6D, 0x61, 0x4A, 0x3E, 0x2A, 0x0B, 0x4F},
							{0x71, 0x20, 0xA8, 0xA4, 0x25, 0xFA, 0x4D, 0x87, 0xA2, 0x26, 0x84, 0x3B, 0xF5, 0x6D, 0x4F, 0xE7},
							{0x71, 0xB7, 0xDF, 0x8F, 0x3D, 0x5B, 0xB4, 0xB1, 0x08, 0x41, 0x7D, 0xDD, 0x9D, 0x85, 0x37, 0xE6},
							{0x73, 0x31, 0x26, 0xD1, 0x25, 0xDE, 0x3B, 0x71, 0x10, 0x82, 0xDD, 0x02, 0x3A, 0x89, 0xD0, 0x45},
							{0x73, 0x4A, 0x63, 0xC3, 0xF6, 0x0A, 0xF2, 0xCD, 0x33, 0x65, 0x71, 0x1A, 0xC6, 0xA9, 0xC7, 0xD0},
							{0x74, 0xBE, 0x73, 0x4E, 0x04, 0xC0, 0x80, 0xC9, 0x05, 0x51, 0xFC, 0x0F, 0xED, 0xB1, 0xB0, 0xF7},
							{0x74, 0xD5, 0x80, 0xD4, 0xBC, 0x34, 0xA8, 0x6A, 0xA2, 0x0A, 0x04, 0x02, 0x45, 0x4C, 0xC1, 0x7B},
							{0x75, 0x80, 0xAC, 0x71, 0xC1, 0xBF, 0x56, 0xF8, 0x4B, 0x18, 0x04, 0x0B, 0x73, 0x61, 0xEC, 0xE3},
							{0x76, 0x41, 0x68, 0xBC, 0xE5, 0x2F, 0xAA, 0xB5, 0x8A, 0x89, 0xEA, 0xB9, 0x3B, 0xEC, 0x70, 0x86},
							{0x76, 0xA3, 0x25, 0x5D, 0x86, 0x3C, 0x16, 0x2B, 0x23, 0x9B, 0x98, 0x1B, 0xB6, 0x70, 0xC0, 0xC3},
							{0x78, 0xDC, 0x34, 0xE4, 0x04, 0x8F, 0x01, 0xDD, 0x15, 0x6A, 0x33, 0x72, 0x6B, 0x1D, 0x6B, 0x18},
							{0x7A, 0x83, 0x26, 0xF8, 0x2C, 0xF5, 0x6A, 0x24, 0xAE, 0xE8, 0x80, 0x4C, 0x34, 0xED, 0xC2, 0x3B},
							{0x7B, 0x50, 0x40, 0xA5, 0xD6, 0xFF, 0x54, 0x80, 0x7C, 0xB1, 0x37, 0x83, 0xF0, 0x6A, 0xEA, 0x92},
							{0x7B, 0x66, 0x6B, 0xEA, 0x76, 0x32, 0xD4, 0x60, 0x09, 0xD2, 0xB2, 0xA5, 0xC0, 0xA8, 0x84, 0xB5},
							{0x7C, 0xF4, 0x67, 0xEC, 0xCB, 0xC1, 0x52, 0x83, 0x15, 0xAB, 0xBD, 0x06, 0x0E, 0x71, 0xA3, 0x8A},
							{0x7E, 0xA4, 0x9E, 0xBE, 0x3B, 0xBA, 0x46, 0x05, 0x4B, 0x01, 0xBD, 0xB9, 0xDE, 0x27, 0xE1, 0xCA},
							{0x80, 0x6C, 0x3C, 0xAF, 0xD2, 0xBB, 0x4E, 0x4E, 0x17, 0xBD, 0xA2, 0xFB, 0xA0, 0xDC, 0xC5, 0xF6},
							{0x81, 0x12, 0xC7, 0xF1, 0x10, 0x70, 0x07, 0xF0, 0xF2, 0xA0, 0x66, 0x3F, 0xE6, 0x5C, 0xF2, 0x2D},
							{0x81, 0x84, 0xBA, 0x05, 0x34, 0x56, 0x64, 0x99, 0xCC, 0x8E, 0x23, 0xC6, 0x4A, 0xEB, 0xB6, 0xB8},
							{0x82, 0x51, 0xB6, 0x2F, 0xC0, 0x97, 0x63, 0x12, 0xA5, 0x8A, 0x62, 0xF1, 0xB6, 0x87, 0x6E, 0x1F},
							{0x84, 0x08, 0x2C, 0xA3, 0xBF, 0xC2, 0x5C, 0xC1, 0xF2, 0x65, 0xA0, 0x83, 0x75, 0x85, 0xF5, 0x94},
							{0x84, 0xBE, 0x9E, 0x6E, 0x8C, 0xB4, 0x26, 0x6B, 0xA7, 0x67, 0x77, 0xED, 0xCA, 0xF6, 0x98, 0x76},
							{0x85, 0x08, 0x6F, 0xFD, 0x9A, 0xA6, 0xC6, 0x8C, 0x5C, 0xB0, 0xE6, 0x32, 0x89, 0x94, 0x90, 0x10},
							{0x88, 0x0B, 0x25, 0x90, 0x2D, 0xD1, 0x70, 0x63, 0xAD, 0x12, 0x76, 0xEA, 0x9B, 0x81, 0x34, 0x0B},
							{0x88, 0x37, 0xD5, 0x5B, 0xAA, 0x3B, 0x4D, 0x60, 0x55, 0xFF, 0xEA, 0x3A, 0xB4, 0x80, 0xCD, 0xAC},
							{0x88, 0xC6, 0xF7, 0xBF, 0x87, 0xCB, 0x30, 0xE8, 0x08, 0xAE, 0x6C, 0x81, 0xC1, 0x07, 0xC9, 0xEB},
							{0x89, 0x66, 0x25, 0x21, 0x28, 0x66, 0xB7, 0x93, 0x03, 0x4F, 0x19, 0x1E, 0x8B, 0x9E, 0xC9, 0xC9},
							{0x8A, 0x1A, 0xBD, 0x2B, 0xB4, 0x82, 0xD0, 0x8A, 0x60, 0x10, 0xE8, 0x17, 0x20, 0x0A, 0x3B, 0x6F},
							{0x8A, 0x5B, 0x24, 0x1C, 0x65, 0xA8, 0x19, 0xA3, 0xC0, 0x0E, 0x41, 0x9B, 0x8C, 0xF9, 0x4D, 0x91},
							{0x8C, 0xBB, 0x29, 0x9F, 0xA3, 0xCC, 0xCE, 0x7A, 0x0F, 0x6D, 0x23, 0xB2, 0xE8, 0x6B, 0x22, 0x72},
							{0x8D, 0x20, 0xDD, 0x4A, 0xD8, 0xCD, 0x88, 0x9E, 0xC2, 0x18, 0x90, 0xE2, 0x6A, 0x28, 0x5D, 0xBE},
							{0x90, 0x81, 0x67, 0x2E, 0xAF, 0x74, 0xA9, 0xFF, 0x52, 0xEC, 0x79, 0x0C, 0x86, 0x64, 0xF6, 0x2C},
							{0x92, 0xD4, 0x61, 0xC7, 0x82, 0xA1, 0xA0, 0x28, 0x60, 0x3C, 0x89, 0xEC, 0xAC, 0x4C, 0x39, 0x61},
							{0x94, 0x0D, 0xF4, 0xF1, 0x37, 0xAD, 0x6C, 0x40, 0x76, 0x95, 0x14, 0x93, 0x57, 0x12, 0xA5, 0x60},
							{0x95, 0x08, 0x2C, 0x2C, 0x71, 0xDA, 0x51, 0xFA, 0xF0, 0x0E, 0x93, 0x63, 0x3E, 0x35, 0xB6, 0x6E},
							{0x95, 0x1C, 0x02, 0x53, 0x10, 0xE6, 0x26, 0x38, 0x1C, 0x33, 0x27, 0x5A, 0x91, 0xAE, 0x61, 0x49},
							{0x95, 0x5F, 0x7A, 0xD4, 0xD1, 0x04, 0xAC, 0xA0, 0xA0, 0x0D, 0x2F, 0x04, 0xFC, 0x03, 0x72, 0x2F},
							{0x95, 0xA9, 0xC3, 0x84, 0xC2, 0xC0, 0x3B, 0x98, 0xA5, 0x60, 0xE3, 0x77, 0x25, 0xC7, 0x02, 0xB5},
							{0x96, 0x20, 0x92, 0xD7, 0xAC, 0x67, 0x05, 0xFD, 0x22, 0xC4, 0x98, 0x4D, 0x44, 0xB6, 0x09, 0x9D},
							{0x96, 0xA1, 0xA9, 0x5D, 0x92, 0x5E, 0x40, 0xC3, 0x6F, 0x3D, 0xA9, 0xA5, 0xC5, 0x1C, 0x44, 0xE6},
							{0x97, 0x87, 0xF6, 0x3A, 0xA6, 0x79, 0xBC, 0xB7, 0x94, 0x43, 0x87, 0xCC, 0xAE, 0x79, 0xC5, 0x6D},
							{0x98, 0x37, 0xE0, 0xF9, 0xA2, 0x46, 0x50, 0xE6, 0x75, 0x4C, 0xB9, 0x57, 0x96, 0x09, 0x15, 0x57},
							{0x98, 0xC5, 0x37, 0xB8, 0x55, 0x19, 0x40, 0x21, 0x6D, 0x57, 0x96, 0x1F, 0x07, 0xF5, 0x78, 0x93},
							{0x99, 0x35, 0xE3, 0x02, 0xA0, 0x05, 0x08, 0x3D, 0x27, 0x15, 0xDE, 0x29, 0x84, 0x23, 0xA0, 0x98},
							{0x99, 0x52, 0x8B, 0x97, 0xC1, 0x5E, 0xF4, 0x41, 0x5C, 0xDE, 0xC8, 0xCC, 0x0C, 0x3B, 0x07, 0xFC},
							{0x9A, 0xA1, 0xE0, 0x9E, 0xCE, 0x91, 0x6E, 0x6B, 0xFA, 0x02, 0xF4, 0xEE, 0xB2, 0x91, 0x47, 0x69},
							{0x9B, 0x2E, 0xD1, 0x21, 0x2B, 0x23, 0xAE, 0x15, 0xD1, 0x86, 0x4F, 0xAB, 0x6F, 0xB3, 0x25, 0x25},
							{0x9C, 0x36, 0xEC, 0x4D, 0x6C, 0x17, 0x11, 0xE1, 0xA1, 0x37, 0x10, 0xCD, 0x7D, 0x4E, 0xDB, 0x63},
							{0x9F, 0x14, 0x9A, 0x4C, 0xA2, 0xC8, 0xAE, 0x71, 0x21, 0x26, 0xCA, 0x90, 0xF1, 0x76, 0xC5, 0x81},
							{0x9F, 0x98, 0xF2, 0xDF, 0xD4, 0x95, 0x52, 0x5C, 0xE9, 0x8B, 0x0C, 0x03, 0xFA, 0xD4, 0x5C, 0x5A},
							{0x9F, 0xB0, 0x73, 0xE0, 0x4F, 0x55, 0x82, 0xF8, 0x56, 0xCA, 0xC1, 0xD4, 0x34, 0xF2, 0xCF, 0xF3},
							{0xA0, 0x27, 0x42, 0xAC, 0x01, 0xE9, 0x49, 0x4B, 0x09, 0x7E, 0x7A, 0x28, 0x0F, 0x89, 0x5E, 0x4F},
							{0xA0, 0xD6, 0x73, 0x9B, 0xF3, 0x7D, 0x4A, 0x04, 0xB6, 0x8C, 0x9F, 0xB6, 0x13, 0x7D, 0xA0, 0x80},
							{0xA1, 0x2A, 0xDC, 0x8A, 0xBC, 0x3A, 0x7F, 0x7A, 0x89, 0xD6, 0xCA, 0xCD, 0x68, 0xCB, 0xFD, 0xDB},
							{0xA1, 0x9D, 0x26, 0x92, 0xAB, 0xB1, 0xD2, 0x1B, 0xCD, 0x88, 0x35, 0x4B, 0x42, 0x44, 0xA7, 0x92},
							{0xA3, 0x7D, 0x10, 0xF0, 0x7C, 0xBA, 0x93, 0x12, 0x83, 0x3E, 0x2F, 0xAB, 0x22, 0xF5, 0xA6, 0xFA},
							{0xA4, 0x77, 0xC6, 0x02, 0x94, 0x4D, 0xCB, 0x92, 0x6B, 0xEB, 0xB3, 0xA2, 0x37, 0xF1, 0x70, 0x59},
							{0xA6, 0xD1, 0xED, 0x9D, 0x41, 0x90, 0xD0, 0xB1, 0xCB, 0xBB, 0x62, 0x14, 0x7D, 0x3A, 0xB3, 0xE7},
							{0xA7, 0xFC, 0xA8, 0x77, 0xE1, 0x18, 0x02, 0xD2, 0xD2, 0x85, 0x20, 0x87, 0x7C, 0x1A, 0x3B, 0x25},
							{0xA9, 0x46, 0xC1, 0xC8, 0x42, 0x7C, 0x1D, 0x8C, 0x84, 0x63, 0xA0, 0xE3, 0x1F, 0xC1, 0x1A, 0xB2},
							{0xAB, 0xCE, 0x5C, 0x83, 0x48, 0xC9, 0x4C, 0x62, 0xF8, 0x07, 0x5C, 0x7B, 0x0E, 0x13, 0xBB, 0x3A},
							{0xAD, 0x58, 0xA8, 0xFC, 0x2C, 0xC3, 0x62, 0x15, 0x9C, 0x88, 0x9F, 0xC3, 0xA7, 0x84, 0x4D, 0xE2},
							{0xAE, 0x36, 0x4C, 0x95, 0x69, 0x83, 0xDB, 0x32, 0x26, 0x5D, 0xCF, 0x5D, 0x92, 0xB4, 0xBE, 0xED},
							{0xAE, 0xC0, 0x08, 0x48, 0xB2, 0xBF, 0x7A, 0xC5, 0xAD, 0x4F, 0xD1, 0x83, 0x57, 0xB8, 0x6B, 0x08},
							{0xB1, 0x09, 0x12, 0x88, 0x0A, 0x37, 0xB9, 0xD9, 0x62, 0xCE, 0x83, 0xCF, 0xCE, 0xCE, 0x2A, 0x6C},
							{0xB1, 0x40, 0xC9, 0xBD, 0xD1, 0x61, 0xA8, 0xBF, 0xAF, 0x7A, 0x70, 0xDD, 0xC2, 0x84, 0x90, 0x60},
							{0xB1, 0xEC, 0x99, 0xD2, 0xAB, 0xCA, 0xB3, 0x2D, 0xB5, 0x22, 0xBA, 0x9E, 0x07, 0xD3, 0x67, 0x7C},
							{0xB1, 0xF9, 0x67, 0x46, 0x69, 0x08, 0x41, 0x6F, 0xEB, 0x9A, 0x4A, 0x1E, 0xB7, 0x1D, 0x86, 0xC6},
							{0xB2, 0x23, 0x48, 0x89, 0x28, 0xEE, 0x76, 0xA5, 0x70, 0x7A, 0xCE, 0xA4, 0xF7, 0x39, 0x57, 0xC7},
							{0xB2, 0x6B, 0x09, 0x40, 0xE9, 0x07, 0x68, 0xE4, 0x83, 0xD0, 0xEE, 0x8F, 0xCE, 0xDD, 0xFA, 0xA4},
							{0xB3, 0xD7, 0x97, 0x18, 0xFD, 0x64, 0xE4, 0x4F, 0xA6, 0xF3, 0xCC, 0x4E, 0xDE, 0x5D, 0x35, 0xF0},
							{0xB4, 0x91, 0x76, 0x58, 0x98, 0xD6, 0xDC, 0xF2, 0x2B, 0x32, 0xD5, 0x52, 0xF1, 0x84, 0xC2, 0x9B},
							{0xB7, 0xE3, 0xE0, 0x59, 0xD9, 0xAB, 0x5F, 0x0C, 0xAA, 0xC6, 0x2F, 0xB7, 0x6B, 0x9D, 0xFB, 0x75},
							{0xBA, 0xE0, 0x99, 0x67, 0xAE, 0xD6, 0x4F, 0x19, 0x8F, 0xD3, 0x97, 0x51, 0xA6, 0x5B, 0x73, 0x1E},
							{0xBC, 0x00, 0x9B, 0xAE, 0x20, 0x28, 0x62, 0x60, 0x01, 0xF2, 0xB7, 0x50, 0xE6, 0x5A, 0x47, 0xCE},
							{0xBC, 0xA3, 0x3B, 0x51, 0xB5, 0x71, 0xE0, 0x4D, 0xDA, 0x27, 0x9C, 0x37, 0xAD, 0xF3, 0xFA, 0xE5},
							{0xBD, 0x95, 0xBE, 0x3A, 0x66, 0x9D, 0x77, 0x50, 0x1C, 0x19, 0xA9, 0xDE, 0xD7, 0xB1, 0x51, 0x7D},
							{0xBD, 0xF4, 0x7B, 0x54, 0x66, 0x5D, 0x18, 0x4A, 0xAC, 0x30, 0x61, 0xC3, 0x79, 0x3A, 0x7B, 0xE7},
							{0xBE, 0x1D, 0xA9, 0x44, 0xBB, 0xD7, 0x98, 0x6E, 0x57, 0xBC, 0x7D, 0x30, 0x6C, 0x53, 0xA4, 0x63},
							{0xBF, 0xB0, 0xF7, 0x0B, 0x0B, 0x8A, 0x47, 0x47, 0x8A, 0xC5, 0x10, 0x2B, 0x55, 0x05, 0xCA, 0x94},
							{0xC1, 0x12, 0x3A, 0xD7, 0xC5, 0x94, 0xBA, 0x09, 0x75, 0xAD, 0xED, 0x15, 0xE3, 0x2C, 0x0B, 0x14},
							{0xC1, 0x51, 0xF1, 0x8E, 0x92, 0x74, 0x9D, 0x0C, 0xCF, 0x4B, 0x77, 0x42, 0xCD, 0xE2, 0xC1, 0x87},
							{0xC1, 0x70, 0xEE, 0xBB, 0x93, 0x4E, 0x5A, 0xBD, 0x97, 0x37, 0x2C, 0x0D, 0xE0, 0x57, 0x42, 0x23},
							{0xC2, 0x7F, 0x42, 0xD2, 0xC5, 0x5B, 0x80, 0x91, 0x25, 0x74, 0x01, 0x32, 0xD3, 0x23, 0x60, 0xE8},
							{0xC5, 0x10, 0xCC, 0x1D, 0xB8, 0xC7, 0x9C, 0xB5, 0x6F, 0xE4, 0xDA, 0x1D, 0x8A, 0xEE, 0x71, 0x6E},
							{0xC7, 0x1A, 0x90, 0xF3, 0x63, 0x32, 0xBA, 0x0A, 0x18, 0x9B, 0x7E, 0x7E, 0xDE, 0xFD, 0x42, 0xEC},
							{0xC7, 0x9B, 0x35, 0xC0, 0x97, 0x36, 0x75, 0xAE, 0x67, 0x7C, 0xE1, 0x98, 0x67, 0x88, 0x76, 0x6A},
							{0xC8, 0x0E, 0xCB, 0xCE, 0x01, 0xB2, 0xA4, 0x1C, 0xAB, 0xC3, 0x15, 0x95, 0x6B, 0xDD, 0x26, 0xB0},
							{0xC8, 0x19, 0xB0, 0x5B, 0xD5, 0xC8, 0x84, 0x91, 0x34, 0x26, 0xBF, 0xF3, 0x37, 0xFE, 0x04, 0x68},
							{0xC8, 0x19, 0xE1, 0x53, 0x7F, 0xA7, 0xB0, 0xE7, 0x08, 0x2A, 0xB6, 0x2D, 0x72, 0x2E, 0xE0, 0x1F},
							{0xCB, 0x61, 0x18, 0x89, 0xBD, 0xA6, 0xDF, 0x84, 0xF3, 0x0F, 0x7D, 0x74, 0x5A, 0x48, 0xA3, 0x0F},
							{0xCE, 0x24, 0xEC, 0xDF, 0x88, 0x7C, 0xA0, 0x16, 0xE7, 0x85, 0xF8, 0xA4, 0x52, 0x02, 0x6D, 0xCB},
							{0xCF, 0xA6, 0xEE, 0x85, 0xF9, 0x6F, 0xD3, 0xED, 0xF2, 0x64, 0xFB, 0x69, 0x0B, 0x97, 0xC5, 0xD0},
							{0xD0, 0x73, 0x60, 0x6D, 0x21, 0x2E, 0x1D, 0xD4, 0x1F, 0x7C, 0xE9, 0x6F, 0xD8, 0xE6, 0xB2, 0xF5},
							{0xD4, 0x2D, 0xC6, 0xED, 0x90, 0x1F, 0xA7, 0x77, 0x18, 0xEB, 0x74, 0x6E, 0xA6, 0x74, 0x16, 0x79},
							{0xD7, 0x10, 0xA7, 0x35, 0xF8, 0x53, 0xEC, 0xCE, 0x3A, 0xE6, 0x76, 0x6B, 0x59, 0xA1, 0x59, 0xEB},
							{0xD7, 0x85, 0x4D, 0x20, 0x09, 0xF2, 0xF4, 0x40, 0x41, 0xC0, 0x41, 0xE0, 0x64, 0x56, 0xA7, 0x84},
							{0xD8, 0x78, 0x04, 0x1E, 0xFB, 0xAD, 0x62, 0x89, 0xBD, 0x75, 0x1C, 0xD0, 0xC9, 0x3A, 0xCD, 0x3C},
							{0xD9, 0x42, 0x54, 0xA0, 0xA4, 0xA0, 0x9D, 0x6B, 0x53, 0xD5, 0x6E, 0x33, 0x70, 0xEF, 0x88, 0xAA},
							{0xD9, 0xD1, 0x30, 0x7F, 0xDA, 0xAB, 0xAA, 0xFD, 0x0B, 0x08, 0xCA, 0x3E, 0x53, 0xD6, 0x40, 0xA6},
							{0xDA, 0x53, 0xC3, 0x52, 0x6C, 0x32, 0xCC, 0x47, 0x44, 0x9D, 0x52, 0xEA, 0xF2, 0xE3, 0xAD, 0x31},
							{0xDA, 0x59, 0x52, 0x8F, 0x36, 0x56, 0x7E, 0x95, 0x99, 0xC4, 0x79, 0x6D, 0xC2, 0x83, 0x98, 0xAD},
							{0xDB, 0xC8, 0xD8, 0xA1, 0x8E, 0x7F, 0x5A, 0xF8, 0x19, 0x4D, 0x39, 0xED, 0x73, 0x73, 0x83, 0x3C},
							{0xDC, 0x56, 0x73, 0xC7, 0x69, 0x8F, 0xB8, 0x35, 0x83, 0xC9, 0x0F, 0xA2, 0x82, 0xBE, 0xB3, 0x0D},
							{0xDE, 0xB2, 0xD8, 0x67, 0x8F, 0x7C, 0x8D, 0x53, 0xF0, 0x32, 0x69, 0xBC, 0x0B, 0x7F, 0x0F, 0xBE},
							{0xDF, 0x64, 0xAB, 0x0E, 0x48, 0x9F, 0xCE, 0x74, 0x91, 0xD4, 0xBF, 0x5D, 0xC5, 0x66, 0x68, 0xFB},
							{0xE0, 0xB2, 0x5B, 0xF2, 0x20, 0x16, 0x9E, 0xB7, 0x4D, 0x07, 0x79, 0x64, 0x48, 0x54, 0x94, 0x4D},
							{0xE1, 0x80, 0xDD, 0x9B, 0x1E, 0x9E, 0x2F, 0xF0, 0xC7, 0x81, 0xED, 0x2A, 0xB0, 0xB8, 0xCC, 0x37},
							{0xE1, 0x9E, 0xB9, 0x2C, 0x1A, 0x5A, 0x5E, 0x08, 0x04, 0xAE, 0x90, 0xE6, 0x1E, 0x5C, 0xAC, 0xFD},
							{0xE3, 0xD0, 0x1E, 0x1F, 0xC9, 0xD4, 0x1A, 0x76, 0x78, 0x74, 0x97, 0xFA, 0x4F, 0x36, 0x32, 0xDC},
							{0xE4, 0x9D, 0x18, 0x0A, 0x43, 0x8A, 0x13, 0xBB, 0xCC, 0xCA, 0x94, 0x96, 0xFA, 0x9A, 0xB0, 0x18},
							{0xE5, 0x50, 0xC0, 0x3A, 0x36, 0x00, 0x1F, 0xD0, 0x98, 0xB4, 0x32, 0xBD, 0x05, 0x2D, 0xEC, 0x66},
							{0xE6, 0x82, 0xBF, 0x34, 0x14, 0x84, 0xC2, 0xA4, 0xEE, 0x4B, 0xF0, 0x0C, 0x2B, 0xAE, 0xF2, 0xF6},
							{0xE7, 0x25, 0x15, 0x95, 0x71, 0x30, 0x9E, 0xA3, 0x5D, 0xED, 0x2E, 0xE8, 0x00, 0x53, 0xCC, 0xB1},
							{0xE7, 0x61, 0x7B, 0x34, 0xD2, 0xD7, 0xF6, 0x45, 0x70, 0xB5, 0xA3, 0xA6, 0x32, 0x1F, 0x1D, 0xF0},
							{0xE7, 0x82, 0xD4, 0x14, 0x61, 0x44, 0x6A, 0x5B, 0x80, 0x5F, 0xDF, 0x0C, 0x30, 0x97, 0x7A, 0x2B},
							{0xE7, 0xDC, 0x0E, 0xEE, 0x7D, 0x1D, 0xC7, 0x1A, 0xED, 0x4B, 0x59, 0x9E, 0x96, 0xB3, 0x61, 0xBA},
							{0xE9, 0x03, 0x3F, 0x1F, 0x2C, 0x18, 0x71, 0x9E, 0x95, 0xA8, 0x30, 0x0A, 0xD2, 0x47, 0xA3, 0xD8},
							{0xEA, 0x88, 0x98, 0xBA, 0x6D, 0xDD, 0x8A, 0x2A, 0x5F, 0x1C, 0x08, 0xA6, 0x9E, 0xC4, 0x6F, 0x05},
							{0xEA, 0xE2, 0x43, 0xBD, 0x8B, 0x7F, 0xD3, 0x40, 0xC1, 0x04, 0x86, 0x15, 0x44, 0x1A, 0x77, 0x0E},
							{0xEA, 0xE4, 0xDF, 0x3A, 0xE5, 0x77, 0xDB, 0xB5, 0x74, 0x69, 0x58, 0x40, 0x15, 0x7F, 0x1B, 0x19},
							{0xEB, 0xC7, 0x22, 0x0B, 0xE7, 0x46, 0x9B, 0x17, 0x9E, 0x8F, 0x46, 0x73, 0x7B, 0xEB, 0xA9, 0x88},
							{0xEC, 0x2C, 0x2D, 0xF6, 0x2A, 0x2F, 0x34, 0x92, 0x9E, 0xF2, 0xFC, 0x0B, 0x0F, 0x51, 0x72, 0x54},
							{0xEC, 0x4C, 0x2D, 0x3E, 0xEE, 0xD5, 0x73, 0x95, 0x59, 0xD3, 0x6E, 0x94, 0xCD, 0xE4, 0x0F, 0x8A},
							{0xF0, 0x5E, 0x4C, 0x17, 0x3E, 0x76, 0x0A, 0x48, 0xF4, 0x3D, 0x29, 0x0A, 0x6A, 0xE0, 0x32, 0xC7},
							{0xF0, 0x76, 0xAC, 0x49, 0x95, 0xCF, 0x07, 0xC2, 0xEF, 0x61, 0xA1, 0x3D, 0xD5, 0xA8, 0x57, 0xE2},
							{0xF0, 0x83, 0xDB, 0xC1, 0x71, 0x00, 0x85, 0x20, 0x74, 0x43, 0x0B, 0x9D, 0xE3, 0xDB, 0xC5, 0x4B},
							{0xF0, 0xBC, 0x07, 0x10, 0xFE, 0x15, 0x5D, 0x54, 0xB8, 0xF8, 0x57, 0xEC, 0x15, 0x2F, 0x66, 0x35},
							{0xF1, 0x29, 0xEB, 0xC3, 0xCE, 0x28, 0xD2, 0xF7, 0x26, 0x88, 0x92, 0xE5, 0xF0, 0x09, 0x91, 0x82},
							{0xF1, 0x6C, 0xC3, 0xB2, 0x61, 0x0C, 0x10, 0x7C, 0x28, 0x07, 0x73, 0xCB, 0xE9, 0x39, 0x1A, 0x9B},
							{0xF2, 0x83, 0xFB, 0x7E, 0x0F, 0x98, 0x93, 0xD1, 0xD1, 0x4F, 0xDC, 0x34, 0x39, 0xC9, 0x2D, 0xDD},
							{0xF2, 0x8F, 0xBE, 0x5F, 0x54, 0xE5, 0x26, 0x52, 0x9D, 0xCA, 0x86, 0xCE, 0x1B, 0xEB, 0x0D, 0x28},
							{0xF2, 0xB0, 0xA8, 0x40, 0xEC, 0x02, 0x23, 0xF1, 0x7D, 0xE6, 0x14, 0x53, 0xA6, 0x9D, 0xAA, 0x8C},
							{0xF2, 0xCF, 0x71, 0x8A, 0x7F, 0x9B, 0x40, 0xBC, 0x8C, 0x6F, 0x92, 0x44, 0x64, 0x20, 0xAA, 0x1C},
							{0xF3, 0xA5, 0x0E, 0x40, 0x2B, 0x5D, 0xA7, 0xA1, 0xBF, 0x9A, 0x27, 0x60, 0xDB, 0x56, 0xAB, 0x99},
							{0xF3, 0xC7, 0xAD, 0x73, 0x01, 0xAB, 0x1B, 0x21, 0x60, 0xA7, 0x4B, 0x07, 0x76, 0x16, 0xB9, 0x2D},
							{0xF4, 0x35, 0x80, 0x7C, 0xB2, 0x33, 0x83, 0xE3, 0xE4, 0xAE, 0xAE, 0x60, 0x08, 0x81, 0xEA, 0x8F},
							{0xF5, 0x2F, 0x10, 0x1A, 0x52, 0x74, 0x4E, 0x50, 0xAE, 0xBD, 0xE8, 0x39, 0x1B, 0xDF, 0x10, 0x83},
							{0xF6, 0x13, 0xDE, 0xF9, 0xB1, 0x95, 0x94, 0xF3, 0x31, 0xC0, 0x53, 0xC3, 0x9D, 0xC4, 0xCF, 0x24},
							{0xF7, 0xED, 0x67, 0x7C, 0x4D, 0x82, 0x2B, 0xA6, 0x79, 0x46, 0x10, 0x68, 0xDB, 0xE1, 0x51, 0xF0},
							{0xF9, 0xE3, 0x36, 0xAB, 0x0F, 0xA5, 0xA7, 0x6B, 0x98, 0x3D, 0x7A, 0x99, 0xE9, 0x4D, 0xD6, 0xA0},
							{0xFA, 0xE1, 0x95, 0xD7, 0xC2, 0x5D, 0x64, 0x3C, 0xF6, 0x91, 0x7C, 0x98, 0x12, 0xA7, 0x78, 0xA9},
							{0xFD, 0x6F, 0xCD, 0xB6, 0x04, 0xD0, 0x56, 0x06, 0x59, 0x4F, 0x3E, 0xF4, 0x1A, 0xD3, 0x28, 0x4D},
							{0xFE, 0xC2, 0x7D, 0x4B, 0xCE, 0x3F, 0x20, 0x61, 0x0C, 0x78, 0x41, 0x35, 0x49, 0x57, 0x94, 0x6F},
							{0xFF, 0x60, 0x9E, 0x10, 0xA8, 0xEA, 0x2B, 0x09, 0x97, 0xF5, 0xB2, 0xA0, 0xB8, 0x3C, 0x51, 0x14},
							{0xFF, 0x72, 0xA0, 0xD3, 0x74, 0x67, 0xF7, 0xE9, 0xFE, 0xC7, 0x3B, 0xB9, 0x52, 0xBD, 0x75, 0x09},
							{0xFF, 0xEC, 0xE0, 0x85, 0xD8, 0x67, 0x7C, 0x17, 0x38, 0xA0, 0xA8, 0xDC, 0xBE, 0x7B, 0xB7, 0x67}};

	
	WORD PayloadMagic = 0x4D4D;
	WORD PayloadVersion = 0x4099;
	WORD PayloadFlags = NULL;
	DWORD HeaderSize = 0x120;
	DWORD EntryPoint = 0x120;
	BYTE PayloadKey[0x10] = { 0x81, 0x68, 0x4D, 0x8C, 0x90, 0xFD, 0xBF, 0x3C, 0x04, 0x2C, 0x27, 0x44, 0x79, 0xC9, 0xF5, 0x25 };
	BYTE PayloadSig[0x100] = { 0 };
	DWORD PayloadSize = 0x10000;
	QWORD EccAddr = 0;

	typedef struct _KeysExecute
	{
		WORD Magic;            // 0x2
		WORD Version;        // 0x2
		DWORD Flags;        // 0x4
		DWORD EntryPoint;    // 0x4
		DWORD Size;            // 0x4
		BYTE key[0x10];        // 0x10
		BYTE Sig[0x100];    // 0x100
		// Header: 0x120
	} KeysExecute, *PKeysExecute;
	enum KeysExecuteError
	{
		EXECUTE_SUCCESS,
		EXECUTE_INVALID_PAYLOAD_SIZE,
		EXECUTE_INVALID_BUFFER_SIZE,
		EXECUTE_INVALID_BUFFER_ADDRESS,
		EXECUTE_INVALID_RETURN
	};

	BYTE BLKey[0x10] = { 0xDD, 0x88, 0xAD, 0x0C, 0x9E, 0xD6, 0x69, 0xE7, 0xB5, 0x67, 0x94, 0xFB, 0x68, 0x56, 0x3E, 0xFA };

	// XeKeysExecute seems to be ms's official way of executing a privileged ppc block.
	// Similar to expansions, except this will free the memory after being used instead of it being taken for the entirety of the session.
	// Each(KeysExecute and Expansions) has their advantages/disadvantages.
	// If your console freezes after calling HvxKeysExecute check the following:
	//        - Allocate the code block in using something like XPhysicalAlloc or MmAllocatePhysicalMemory
	//            The address must be within a certain range to be considered valid
	//        - Check your PPC, I can't protect you from bad PPC code that causes a read/write exception
	// Parameters
	//        Payload: Payload buffer
	//            - Must be 0x80 byte aligned
	//            - Must be > 0x120 and < 0x10000
	//            - Must be allocated with XPhysicalAlloc or MmAllocatePhysicalMemory
	//        BufferSize: Return buffer size
	//            - Must be > 0x120 and < 0x10000
	//            - Must be 0x80 byte aligned
	// Header Info
	//        WORD Magic: Must be 0x4D4D
	//        WORD Version: Doesn't really matter
	//        DWORD Flags: Doesn't really matter, leave null
	//        DWORD EntryPoint:
	//            - Must be after >= 0x120 and < Size
	//            - Must be 4 byte aligned
	//        DWORD Size:
	//            - Must be > 0x120 and < BufferSize
	//        BYTE Key[0x10]: key used for Rc4 encryption/decryption. rc4Key = HmacSha(1BLKey, 0x10, header->Key, 0x10)
	//        BYTE Sig[0x100]: Rsa signature, we patch the RSA check so this can be null without an issue
	//        PBYTE CodeBlock: Payload to be executed

	// 7s censors this word for some reason, but its needed here so its: _declspec(n_a_k_e_d) remove the underscores. pm me if there is an issue with this
	static QWORD _declspec(naked) HvKeysExecute(PBYTE Payload, DWORD BufferSize, QWORD Arg1, QWORD Arg2, QWORD Arg3, QWORD Arg4)
	{
		__asm
		{
			li    r0, 0x40
			sc
			blr
		}
	}

		#define HvxCall QWORD _declspec(naked)
	static HvxCall HvxExpansionInstall(DWORD PhysicalAddress, DWORD CodeSize) {
		if(Globals::IsDevkit) __asm { li r0, 0x70 }
		else __asm { li r0, 0x72 }
		__asm {
			sc
			blr
		}
	}
	static HvxCall HvxExpansionCall(DWORD ExpansionId, QWORD Param1 = 0, QWORD Param2 = 0, QWORD Param3 = 0, QWORD Param4 = 0) {
		if(Globals::IsDevkit) __asm { li r0, 0x71 }
		else __asm { li r0, 0x73 }
		__asm {
			sc
			blr
		}
	}


	QWORD ExecutePayload(PBYTE Payload, DWORD Size, QWORD Arg1 = NULL, QWORD Arg2 = NULL, QWORD Arg3 = NULL, QWORD Arg4 = NULL, PCHAR FileName = NULL, PCHAR FileName1 = NULL)
	{
		if ((Size + HeaderSize > PayloadSize) || (Size + HeaderSize < 0x120)){
			Utilities::PrintToLog("Invalid Size!\n");
			return EXECUTE_INVALID_PAYLOAD_SIZE;
		}
		if (PayloadSize == 0){
			Utilities::PrintToLog("Invalid Buffer!\n");
			return EXECUTE_INVALID_BUFFER_SIZE;
		}
		PBYTE bPayload = (PBYTE)XPhysicalAlloc(PayloadSize, MAXULONG_PTR, NULL, PAGE_READWRITE);
		//PBYTE bPayload = (PBYTE)MmAllocatePhysicalMemory(0, PayloadSize, PAGE_READWRITE);
		memset(bPayload, 0, PayloadSize);

		PKeysExecute PHeader = (PKeysExecute)bPayload;
		PHeader->Magic =  (Globals::IsDevkit) ? PayloadMagic + 0x1000 : PayloadMagic;
		PHeader->Version = PayloadVersion;
		PHeader->Flags = PayloadFlags;
		PHeader->Size = HeaderSize + Size;
		PHeader->EntryPoint = EntryPoint;
		memcpy(PHeader->key, PayloadKey, 0x10);
		memcpy(PHeader->Sig, PayloadSig, 0x100);
		memcpy(bPayload + EntryPoint, Payload, Size);

		//if (!Utilities::CWriteFile("XeNoN:\\Devkit\\XeDumps\\Payload_Dump.bin", bPayload, 0x1000))
		//		Utilities::PrintToLog("Return buffer not dumped!\n");

		// data needs to be sent encrypted with the key in the header! rc4Key = HmacSha(header+0x10, 0x10)
		// you could just patch the call to XeCryptRc4Ecb as well and send it unencrypted data. but im not doing that - address: 0x6148
		XECRYPT_RC4_STATE rc4;
		PBYTE rc4Key = (BYTE*)XPhysicalAlloc(0x10, MAXULONG_PTR, 0, PAGE_READWRITE);
		XeCryptHmacSha(BLKey, 0x10, PHeader->key, 0x10, 0, 0, 0, 0, rc4Key, 0x10);
		//Utilities::PrintToLog("Encrypting data...\n");
		XeCryptRc4Key(&rc4, rc4Key, 0x10);
		XeCryptRc4Ecb(&rc4, bPayload + 0x20, PHeader->Size - 0x20);
		//Utilities::PrintToLog("Encrypting Done!\n");

		QWORD physPayload = 0x8000000000000000ULL + (DWORD)MmGetPhysicalAddress(bPayload);

		EccAddr = 0x8000020000010000 + (0xF800 | ((physPayload + 0x400) >> 6) & 0x3FF);

		// The Following is a weird check done by the syscall. I've seen it trip and not trip without changing anything in the source files
		// Seems to be Heavily dependent on the address XPhysicalAlloc assigns you
		// Maybe MmAllocatePhysicalMemory is supposed to be used instead?
		// Should think about a way to free and reallocate to a different address... maybe later
		QWORD physCheck = (((physPayload + PayloadSize) - 1) ^ physPayload) & 0xFFFF0000;
		
		DbgPrint("A: 0x%016llX\nB: 0x%016llX\nC: 0x%016llX\nD: 0x%016llX", physCheck, physPayload, bPayload, Payload);
		if (physCheck)
		{
			Utilities::PrintToLog("PhysCheck Failed\n[physCheck: 0x%016llX][cBufferSize: 0x%X]\n", physCheck, PayloadSize);
			XPhysicalFree(bPayload);
			XPhysicalFree(rc4Key);
			return EXECUTE_INVALID_BUFFER_SIZE;
		}
		if ((physPayload & 0xFFFFFFFF) > 0x1FFFFFFF)
		{
			Utilities::PrintToLog("Invalid bPayload address, make sure your sending a block created with XPhysicalAlloc!\n");
			Utilities::PrintToLog("physPayload: 0x%016llX\n", physPayload);
			XPhysicalFree(bPayload);
			XPhysicalFree(rc4Key);
			return EXECUTE_INVALID_BUFFER_ADDRESS;
		}

		//if (!Utilities::CWriteFile(XeNoN:\\Devkit\\XeDumps\\Payload_Enc_Dump.bin", bPayload, 0x1000))
		//		Utilities::PrintToLog("Return buffer not dumped!\n");

#ifdef _CACHE_DUMP
		PBYTE PhysHV = (PBYTE)XPhysicalAlloc(0x40000, MAXULONG_PTR, NULL, PAGE_READWRITE);
		Arg1 = (QWORD)MmGetPhysicalAddress(PhysHV);
#endif

		// attempt to execute challenge by syscall - HvxKeysExecute = 0x40
		Utilities::PrintToLog("Executing Payload...\n");
		if (physPayload)
			if(physPayload != 0x8000000001B50000)
				Utilities::PrintToLog("R3: 0x%016llX (ERROR!!!)\n", physPayload);
		if (Arg1) Utilities::PrintToLog("R4: 0x%016llX\n", Arg1);
		if (Arg2) Utilities::PrintToLog("R5: 0x%016llX\n", Arg2);
		if (Arg3) Utilities::PrintToLog("R6: 0x%016llX\n", Arg3);
		if (Arg4) Utilities::PrintToLog("R7: 0x%016llX\n", Arg4);
		DWORD ret = (DWORD)HvKeysExecute((PBYTE)physPayload, PayloadSize, Arg1, Arg2, Arg3, Arg4);


#ifdef _SALT_DUMP
		BYTE Ecc[0x2];
		HVPeekPoke::HvPeekBytes(EccAddr, Ecc, 0x2);
		if (!Utilities::CWriteFile(FileName, Ecc, 0x2))
			Utilities::PrintToLog("Salt not dumped!\n");
#endif
#ifdef _CACHE_DUMP
		BYTE Cache1[0x1000];
		HVPeekPoke::HvPeekBytes(0x8000020000010000, Cache1, 0x1000);
		if (!Utilities::CWriteFile(FileName, Cache1, 0x1000))
			Utilities::PrintToLog("Cache not dumped!\n");

		if (!Utilities::CWriteFile(FileName1, PhysHV, 0x40000))
		Utilities::PrintToLog("Physical HV not dumped!\n");

		XPhysicalFree(PhysHV);
#endif

		
#ifdef _MD_CHAL
		BYTE Cache[0x1000];
		HVPeekPoke::HvPeekBytes(0x8000020000010000, Cache, 0x1000);
		if (!Utilities::CWriteFile(FileName1, Cache, 0x1000))
			Utilities::PrintToLog("Cache not dumped!\n");

		BYTE Ecc2[0x2];
		HVPeekPoke::HvPeekBytes(EccAddr, Ecc2, 0x2);
		if (!Utilities::CWriteFile(FileName, Ecc2, 0x2))
			Utilities::PrintToLog("Salt not dumped!\n");
#endif

		// if no other errors occur, ret will be filled with what ever your payload returns
		if (ret != 0)
		{
			Utilities::PrintToLog("ERROR: ");
			if (ret == 0xC8000030)
				Utilities::PrintToLog("[%08X] Parameter Fail!\n\tPayload must be 0x80 byte aligned!\n\tSize must be greater than 0x120 and less than 0x10000 AND must be 0x80 byte aligned!\n", ret);
			else if (ret == 0xC8000032)
				Utilities::PrintToLog("[%08X] Magic or Address Fail!\n\tMagic must be 0x4D4D\n", ret);
			else if (ret == 0xC8000033)
				Utilities::PrintToLog("[%08X] HV Magic Fail!\n\tHV magic must be 0x4E4E\n", ret);
			else if (ret == 0xC8000034)
				Utilities::PrintToLog("[%08X] Header Size Fail!\n\tSize in header must be > 0x120 AND aligned to 0x10 AND < the buffer size!\n", ret);
			else if (ret == 0xC8000035)
				Utilities::PrintToLog("[%08X] EntryPoint Fail!\n\tEntrypoint must be > 0x120 AND 4 byte aligned AND < code size\n", ret);
			else if (ret == 0xC8000036)
				Utilities::PrintToLog("[%08X] Crypt/Signature Fail!\n\tPatch the call to XeCryptBnQwBeSigVerify!\n", ret);
			else
				Utilities::PrintToLog("ret: %08X\n", ret);

			
			XPhysicalFree(bPayload);
			XPhysicalFree(rc4Key);
			return EXECUTE_INVALID_RETURN;
		}
		Utilities::PrintToLog("Payload Done!\n");

		if (!Utilities::CWriteFile("XeNoN:\\Devkit\\XeDumps\\Response.bin", bPayload, 0x1000))
				Utilities::PrintToLog("Return buffer not dumped!\n");

		// done, whether it failed or not, free the memory
		XPhysicalFree(bPayload);
		XPhysicalFree(rc4Key);
		return ret;
	}


	VOID Test(){
		Sleep(500);
		DWORD Size = 0x4E0;

		HVPeekPoke::HvPokeDWORD(Globals::IsDevkit ? 0x80000100000060E4 : 0x800001000000617C, 0x38600001); //patch rsa signature check
		
		
		PBYTE CleanHV;
		DWORD HVSize;
		XGetModuleSection(GetModuleHandle(NAME_MODULE), "HV", (PVOID*)&CleanHV, &HVSize);


#ifdef _SALT_DUMP
		BYTE Key[0x30];
		HVPeekPoke::HvPeekBytes(0x8000010200010100, Key, 0x30);

		Utilities::PrintToLog("Cache Key:\n    %08X%08X%08X%08X\n    %08X%08X%08X%08X\n    %08X%08X%08X%08X\n", 
			*(PDWORD)Key, 
			*(PDWORD)(Key + 0x4),
			*(PDWORD)(Key + 0x8),
			*(PDWORD)(Key + 0xC),
			*(PDWORD)(Key + 0x10),
			*(PDWORD)(Key + 0x14),
			*(PDWORD)(Key + 0x18),
			*(PDWORD)(Key + 0x1C),
			*(PDWORD)(Key + 0x20),
			*(PDWORD)(Key + 0x24),
			*(PDWORD)(Key + 0x28),
			*(PDWORD)(Key + 0x2C));

		Sleep(1000);
		int i = 255;
		//for(int i = 0; i < 256; i++){
			Utilities::PrintToLog("--------------------------------------------------------------\n");
			Utilities::MemoryBuffer mb;
			if (!Utilities::CReadFile("XeNoN:\\Devkit\\XeDumps\\EccPayload.bin", mb))
			{
				Utilities::PrintToLog("Couldn't open payload file\n");
				return;
			}
			PBYTE Payload5 = (PBYTE)XPhysicalAlloc(Size, MAXULONG_PTR, NULL, PAGE_READWRITE);
			PBYTE Salt5 = (PBYTE)XPhysicalAlloc(0x10, MAXULONG_PTR, NULL, PAGE_READWRITE);

			memset(Payload5, 0, Size);
			memset(Salt5, 0, 0x10);

			memcpy(Salt5, Salts[i], 0x10);
			memcpy(Payload5, mb.GetData(), Size);

			
			char KeyName6[0x33];
			sprintf(KeyName6, "%04X_%04X_%04X\0", 
				*(PWORD)Key, 
				*(PWORD)(Key + 0x10),
				*(PWORD)(Key + 0x20));

			
			char FileName6[0x100];
			memset(FileName6, 0, 0x100);
			
			//create cache key dir
			sprintf(FileName6, "XeNoN:\\Devkit\\XeDumps\\%s", KeyName6);
			CreateDirectory(FileName6, NULL); 
			
			//create salts dir
			memset(FileName6, 0, 0x100);
			sprintf(FileName6, "XeNoN:\\Devkit\\XeDumps\\%s\\Salts", KeyName6);
			CreateDirectory(FileName6, NULL); 
			
			
			memset(FileName6, 0, 0x100);
			sprintf(FileName6, "XeNoN:\\Devkit\\XeDumps\\%s\\Salts\\%08X%08X%08X%08X.bin", 
				KeyName6,
				*(PDWORD)(Salts[i]), 
				*(PDWORD)(Salts[i] + 0x4), 
				*(PDWORD)(Salts[i] + 0x8), 
				*(PDWORD)(Salts[i] + 0xC));

			Utilities::PrintToLog("%s\n", FileName6);

			ExecutePayload(Payload5, Size, (QWORD)MmGetPhysicalAddress(Salt5), NULL, NULL, NULL, FileName6);
			Sleep(100);

			XPhysicalFree(Payload5);
			XPhysicalFree(Salt5);
			Utilities::PrintToLog("--------------------------------------------------------------\n\n\n");
		//}
#endif
#ifdef _AES_HACKS
			Utilities::MemoryBuffer mb2;
			if (!Utilities::CReadFile("XeNoN:\\Devkit\\XeDumps\\AESPayload.bin", mb2))
			{
				Utilities::PrintToLog("Couldn't open payload file\n");
				return;
			}
			PBYTE Payload4 = (PBYTE)XPhysicalAlloc(Size, MAXULONG_PTR, NULL, PAGE_READWRITE);
			PBYTE pKey4 = (PBYTE)XPhysicalAlloc(0x10, MAXULONG_PTR, NULL, PAGE_READWRITE);

			memset(Payload4, 0, Size);
			memset(pKey4, 0, 0x10);

			BYTE Key5[] = {0x24, 0xDB, 0x0D, 0x72, 0xF3, 0xB7, 0x13, 0x4A, 0x65, 0x1F, 0x13, 0x39, 0x16, 0x93, 0x68, 0xF7};

			memcpy(pKey4, Key5, 0x10);
			memcpy(Payload4, mb2.GetData(), Size);

			Utilities::PrintToLog("Starting Execution...");

			Sleep(1000);

			ExecutePayload(Payload4, Size, (QWORD)MmGetPhysicalAddress(pKey4));
			
			Utilities::PrintToLog("Execution Done!");

			XPhysicalFree(Payload4);
			XPhysicalFree(pKey4);
#endif

#ifdef _CACHE_DUMP
			BYTE Key8[0x30];
			HVPeekPoke::HvPeekBytes(0x8000010200010100, Key8, 0x30);


			Utilities::PrintToLog("Cache Key:\n    %08X%08X%08X%08X\n    %08X%08X%08X%08X\n    %08X%08X%08X%08X\n", 
			*(PDWORD)Key8, 
			*(PDWORD)(Key8 + 0x4),
			*(PDWORD)(Key8 + 0x8),
			*(PDWORD)(Key8 + 0xC),
			*(PDWORD)(Key8 + 0x10),
			*(PDWORD)(Key8 + 0x14),
			*(PDWORD)(Key8 + 0x18),
			*(PDWORD)(Key8 + 0x1C),
			*(PDWORD)(Key8 + 0x20),
			*(PDWORD)(Key8 + 0x24),
			*(PDWORD)(Key8 + 0x28),
			*(PDWORD)(Key8 + 0x2C));

			Utilities::MemoryBuffer mb8;
			if (!Utilities::CReadFile("XeNoN:\\Devkit\\XeDumps\\CachePayload.bin", mb8))
			{
				Utilities::PrintToLog("Couldn't open payload file\n");
				return;
			}
			
			PBYTE Payload3 = (PBYTE)XPhysicalAlloc(Size, MAXULONG_PTR, NULL, PAGE_READWRITE);
			PBYTE Salt3 = (PBYTE)XPhysicalAlloc(0x10, MAXULONG_PTR, NULL, PAGE_READWRITE);

			memset(Globals::Dumped_HV, 0, 0x40000);
			memset(Payload3, 0, Size);
			memcpy(Payload3, mb8.GetData(), Size);

			Utilities::PrintToLog("Starting Execution...");

			char KeyName9[0x33];
			sprintf(KeyName9, "%04X_%04X_%04X\0", 
				*(PWORD)Key8, 
				*(PWORD)(Key8 + 0x10),
				*(PWORD)(Key8 + 0x20));

			
			char FileName4[0x100];
			char FileName5[0x100];
			memset(FileName4, 0, 0x100);
			
			//create cache key dir
			sprintf(FileName4, "XeNoN:\\Devkit\\XeDumps\\%s", KeyName9);
			CreateDirectory(FileName4, NULL);
			
			//create salts dir
			memset(FileName4, 0, 0x100);
			sprintf(FileName4, "XeNoN:\\Devkit\\XeDumps\\%s\\Cache.bin", KeyName9);

			
			memset(FileName5, 0, 0x100);
			sprintf(FileName5, "XeNoN:\\Devkit\\XeDumps\\%s\\PhysicalHV.bin", KeyName9);

			Sleep(1000);

			HVPeekPoke::HvPeekBytes(0x8000010000000000, Globals::Dumped_HV, 0xFFFF);
			HVPeekPoke::HvPeekBytes(0x8000010200010000, (Globals::Dumped_HV + 0x10000), 0xFFFF);
			HVPeekPoke::HvPeekBytes(0x8000010400020000, (Globals::Dumped_HV + 0x20000), 0xFFFF);
			HVPeekPoke::HvPeekBytes(0x8000010600030000, (Globals::Dumped_HV + 0x30000), 0xFFFF);

			// Clean HV
			HVPeekPoke::HvPokeBytes(0x8000010000000000, CleanHV, 0xFFFF);
			HVPeekPoke::HvPokeBytes(0x8000010000000000, Globals::Dumped_HV, 0x20); 
			HVPeekPoke::HvPokeBytes(0x8000010000000020, Globals::Dumped_HV, 0x10);
			HVPeekPoke::HvPokeDWORD(0x800001000000617C, 0x38600001);

			// HV + 0x10000
			HVPeekPoke::HvPokeBytes(0x8000010200010000, (CleanHV + 0x10000), 0xFFFF);
			HVPeekPoke::HvPokeBytes(0x8000010200010000, (Globals::Dumped_HV + 0x10000), 0x04);
			HVPeekPoke::HvPokeBytes(0x8000010200010020, (Globals::Dumped_HV + 0x10020), 0xA0);
			HVPeekPoke::HvPokeBytes(0x8000010200010100, (Globals::Dumped_HV + 0x10100), 0x30);
			HVPeekPoke::HvPokeBytes(0x8000010200016210, (Globals::Dumped_HV + 0x16210), 0x04);
			HVPeekPoke::HvPokeBytes(0x80000102000164A0, (Globals::Dumped_HV + 0x164A0), 0x01);
			HVPeekPoke::HvPokeBytes(0x80000102000164C0, (Globals::Dumped_HV + 0x164C0), 0x14);
			HVPeekPoke::HvPokeBytes(0x8000010200016500, (Globals::Dumped_HV + 0x16500), 0x80);
			HVPeekPoke::HvPokeBytes(0x8000010200016590, (Globals::Dumped_HV + 0x16590), 0x10);
			HVPeekPoke::HvPokeBytes(0x8000010200016800, (Globals::Dumped_HV + 0x16800), 0x102);
			HVPeekPoke::HvPokeBytes(0x8000010200016A10, (Globals::Dumped_HV + 0x16A10), 0x10);
			HVPeekPoke::HvPokeBytes(0x8000010200016D18, (Globals::Dumped_HV + 0x16D18), 0x04);

			// HV + 0x20000
			HVPeekPoke::HvPokeBytes(0x8000010400020000, (CleanHV + 0x20000), 0xFFFF);

			// HV + 0x30000
			HVPeekPoke::HvPokeBytes(0x8000010600030000, (CleanHV + 0x30000), 0xFFFF);

			ExecutePayload(Payload3, Size, NULL, NULL, NULL, NULL, FileName4, FileName5);

			// Reset Dirty HV
			HVPeekPoke::HvPokeBytes(0x8000010000000000, Globals::Dumped_HV, 0xFFFF);
			HVPeekPoke::HvPokeBytes(0x8000010200010000, (Globals::Dumped_HV + 0x10000), 0xFFFF);
			HVPeekPoke::HvPokeBytes(0x8000010400020000, (Globals::Dumped_HV + 0x20000), 0xFFFF);
			HVPeekPoke::HvPokeBytes(0x8000010600030000, (Globals::Dumped_HV + 0x30000), 0xFFFF);

			

			XPhysicalFree(Payload3);
			XPhysicalFree(Salt3);
#endif

#ifdef _MD_CHAL
		BYTE Key7[0x30];
		HVPeekPoke::HvPeekBytes(0x8000010200010100, Key7, 0x30);

		Utilities::PrintToLog("Cache Key:\n    %08X%08X%08X%08X\n    %08X%08X%08X%08X\n    %08X%08X%08X%08X\n", 
			*(PDWORD)Key7, 
			*(PDWORD)(Key7 + 0x4),
			*(PDWORD)(Key7 + 0x8),
			*(PDWORD)(Key7 + 0xC),
			*(PDWORD)(Key7 + 0x10),
			*(PDWORD)(Key7 + 0x14),
			*(PDWORD)(Key7 + 0x18),
			*(PDWORD)(Key7 + 0x1C),
			*(PDWORD)(Key7 + 0x20),
			*(PDWORD)(Key7 + 0x24),
			*(PDWORD)(Key7 + 0x28),
			*(PDWORD)(Key7 + 0x2C));

		Sleep(1000);
		Utilities::PrintToLog("--------------------------------------------------------------\n\n\n");

		Utilities::MemoryBuffer mb7;
		if (!Utilities::CReadFile("XeNoN:\\Devkit\\XeDumps\\XePayload.bin", mb7)) {
			Utilities::PrintToLog("Couldn't open payload file\n");
			return;
		}
			
		PBYTE Payload2 = (PBYTE)XPhysicalAlloc(Size, MAXULONG_PTR, NULL, PAGE_READWRITE);
		PBYTE Salt2 = (PBYTE)XPhysicalAlloc(0x10, MAXULONG_PTR, NULL, PAGE_READWRITE);

		memset(Payload2, 0, Size);
		memset(Salt2, 0, 0x10);

		memcpy(Salt2, Salts[165], 0x10);
		memcpy(Payload2, mb7.GetData(), Size);

			
		char KeyName[0x33];
		sprintf(KeyName, "%04X_%04X_%04X\0", 
			*(PWORD)Key7, 
			*(PWORD)(Key7 + 0x10),
			*(PWORD)(Key7 + 0x20));

			
		char FileName2[0x100];
		char FileName3[0x100];
		memset(FileName2, 0, 0x100);
		memset(FileName3, 0, 0x100);
			
		//create cache key dir
		sprintf(FileName2, "XeNoN:\\Devkit\\XeDumps\\%s", KeyName);
		CreateDirectory(FileName2, NULL); 

		sprintf(FileName3, "XeNoN:\\Devkit\\XeDumps\\%s\\Cache.bin", KeyName); 
			
		//create salts dir
		memset(FileName2, 0, 0x100);
		sprintf(FileName2, "XeNoN:\\Devkit\\XeDumps\\%s\\Salts", KeyName);
		CreateDirectory(FileName2, NULL); 
			
			
		memset(FileName2, 0, 0x100);
		sprintf(FileName2, "XeNoN:\\Devkit\\XeDumps\\%s\\Salts\\%08X%08X%08X%08X.bin", 
			KeyName,
			*(PDWORD)(Salts[165]), 
			*(PDWORD)(Salts[165] + 0x4), 
			*(PDWORD)(Salts[166] + 0x8), 
			*(PDWORD)(Salts[165] + 0xC));

		Utilities::PrintToLog("%s\n", FileName2);

		HVPeekPoke::HvPeekBytes(0x8000010000000000, Globals::Dumped_HV, 0xFFFF);
		HVPeekPoke::HvPeekBytes(0x8000010200010000, (Globals::Dumped_HV + 0x10000), 0xFFFF);
		HVPeekPoke::HvPeekBytes(0x8000010400020000, (Globals::Dumped_HV + 0x20000), 0xFFFF);
		HVPeekPoke::HvPeekBytes(0x8000010600030000, (Globals::Dumped_HV + 0x30000), 0xFFFF);

		// Clean HV
		HVPeekPoke::HvPokeBytes(0x8000010000000000, CleanHV, 0xFFFF);
		HVPeekPoke::HvPokeBytes(0x8000010000000000, Globals::Dumped_HV, 0x20); 
		HVPeekPoke::HvPokeBytes(0x8000010000000020, Globals::Dumped_HV, 0x10);
		HVPeekPoke::HvPokeDWORD(0x800001000000617C, 0x38600001);

		// HV + 0x10000
		HVPeekPoke::HvPokeBytes(0x8000010200010000, (CleanHV + 0x10000), 0xFFFF);
		HVPeekPoke::HvPokeBytes(0x8000010200010000, (Globals::Dumped_HV + 0x10000), 0x04);
		HVPeekPoke::HvPokeBytes(0x8000010200010020, (Globals::Dumped_HV + 0x10020), 0xA0);
		HVPeekPoke::HvPokeBytes(0x8000010200010100, (Globals::Dumped_HV + 0x10100), 0x30);
		HVPeekPoke::HvPokeBytes(0x8000010200016210, (Globals::Dumped_HV + 0x16210), 0x04);
		HVPeekPoke::HvPokeBytes(0x80000102000164A0, (Globals::Dumped_HV + 0x164A0), 0x01);
		HVPeekPoke::HvPokeBytes(0x80000102000164C0, (Globals::Dumped_HV + 0x164C0), 0x14);
		HVPeekPoke::HvPokeBytes(0x8000010200016500, (Globals::Dumped_HV + 0x16500), 0x80);
		HVPeekPoke::HvPokeBytes(0x8000010200016590, (Globals::Dumped_HV + 0x16590), 0x10);
		HVPeekPoke::HvPokeBytes(0x8000010200016800, (Globals::Dumped_HV + 0x16800), 0x102);
		HVPeekPoke::HvPokeBytes(0x8000010200016A10, (Globals::Dumped_HV + 0x16A10), 0x10);
		HVPeekPoke::HvPokeBytes(0x8000010200016D18, (Globals::Dumped_HV + 0x16D18), 0x04);

		// HV + 0x20000
		HVPeekPoke::HvPokeBytes(0x8000010400020000, (CleanHV + 0x20000), 0xFFFF);

		// HV + 0x30000
		HVPeekPoke::HvPokeBytes(0x8000010600030000, (CleanHV + 0x30000), 0xFFFF);

		ExecutePayload(Payload2, Size, (QWORD)MmGetPhysicalAddress(Salt2), 0x0002000044760000, NULL, NULL, FileName2, FileName3);
			
		// Reset Dirty HV
		HVPeekPoke::HvPokeBytes(0x8000010000000000, Globals::Dumped_HV, 0xFFFF);
		HVPeekPoke::HvPokeBytes(0x8000010200010000, (Globals::Dumped_HV + 0x10000), 0xFFFF);
		HVPeekPoke::HvPokeBytes(0x8000010400020000, (Globals::Dumped_HV + 0x20000), 0xFFFF);
		HVPeekPoke::HvPokeBytes(0x8000010600030000, (Globals::Dumped_HV + 0x30000), 0xFFFF);

		XPhysicalFree(Payload2);
		XPhysicalFree(Salt2);
		Utilities::PrintToLog("--------------------------------------------------------------\n\n\n");
#endif

		HVPeekPoke::HvPokeDWORD(Globals::IsDevkit ? 0x80000100000060E4 : 0x800001000000617C, 0x48005245);// bl XeCryptBnQwBeSigVerify
	}

}